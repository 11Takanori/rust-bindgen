/* automatically generated by rust-bindgen */

#[allow(non_uppercase_statics)];

use std::libc::*;
pub struct CXString {
    data: *c_void,
    private_flags: c_uint,
}
pub type CXIndex = *mut c_void;
pub type Struct_CXTranslationUnitImpl = c_void;
pub type CXTranslationUnit = *mut Struct_CXTranslationUnitImpl;
pub type CXClientData = *mut c_void;
pub struct Struct_CXUnsavedFile {
    Filename: *c_schar,
    Contents: *c_schar,
    Length: c_ulong,
}
pub type Enum_CXAvailabilityKind = c_uint;
pub static CXAvailability_Available: c_uint = 0;
pub static CXAvailability_Deprecated: c_uint = 1;
pub static CXAvailability_NotAvailable: c_uint = 2;
pub static CXAvailability_NotAccessible: c_uint = 3;
pub struct Struct_CXVersion {
    Major: c_int,
    Minor: c_int,
    Subminor: c_int,
}
pub type CXVersion = Struct_CXVersion;
pub type CXGlobalOptFlags = c_uint;
pub static CXGlobalOpt_None: c_uint = 0;
pub static CXGlobalOpt_ThreadBackgroundPriorityForIndexing: c_uint = 1;
pub static CXGlobalOpt_ThreadBackgroundPriorityForEditing: c_uint = 2;
pub static CXGlobalOpt_ThreadBackgroundPriorityForAll: c_uint = 3;
pub type CXFile = *mut c_void;
pub struct CXFileUniqueID {
    data: [c_ulonglong, ..3u],
}
pub struct CXSourceLocation {
    ptr_data: [*c_void, ..2u],
    int_data: c_uint,
}
pub struct CXSourceRange {
    ptr_data: [*c_void, ..2u],
    begin_int_data: c_uint,
    end_int_data: c_uint,
}
pub type Enum_CXDiagnosticSeverity = c_uint;
pub static CXDiagnostic_Ignored: c_uint = 0;
pub static CXDiagnostic_Note: c_uint = 1;
pub static CXDiagnostic_Warning: c_uint = 2;
pub static CXDiagnostic_Error: c_uint = 3;
pub static CXDiagnostic_Fatal: c_uint = 4;
pub type CXDiagnostic = *mut c_void;
pub type CXDiagnosticSet = *mut c_void;
pub type Enum_CXLoadDiag_Error = c_uint;
pub static CXLoadDiag_None: c_uint = 0;
pub static CXLoadDiag_Unknown: c_uint = 1;
pub static CXLoadDiag_CannotLoad: c_uint = 2;
pub static CXLoadDiag_InvalidFile: c_uint = 3;
pub type Enum_CXDiagnosticDisplayOptions = c_uint;
pub static CXDiagnostic_DisplaySourceLocation: c_uint = 1;
pub static CXDiagnostic_DisplayColumn: c_uint = 2;
pub static CXDiagnostic_DisplaySourceRanges: c_uint = 4;
pub static CXDiagnostic_DisplayOption: c_uint = 8;
pub static CXDiagnostic_DisplayCategoryId: c_uint = 16;
pub static CXDiagnostic_DisplayCategoryName: c_uint = 32;
pub type Enum_CXTranslationUnit_Flags = c_uint;
pub static CXTranslationUnit_None: c_uint = 0;
pub static CXTranslationUnit_DetailedPreprocessingRecord: c_uint = 1;
pub static CXTranslationUnit_Incomplete: c_uint = 2;
pub static CXTranslationUnit_PrecompiledPreamble: c_uint = 4;
pub static CXTranslationUnit_CacheCompletionResults: c_uint = 8;
pub static CXTranslationUnit_ForSerialization: c_uint = 16;
pub static CXTranslationUnit_CXXChainedPCH: c_uint = 32;
pub static CXTranslationUnit_SkipFunctionBodies: c_uint = 64;
pub static CXTranslationUnit_IncludeBriefCommentsInCodeCompletion: c_uint =
    128;
pub type Enum_CXSaveTranslationUnit_Flags = c_uint;
pub static CXSaveTranslationUnit_None: c_uint = 0;
pub type Enum_CXSaveError = c_uint;
pub static CXSaveError_None: c_uint = 0;
pub static CXSaveError_Unknown: c_uint = 1;
pub static CXSaveError_TranslationErrors: c_uint = 2;
pub static CXSaveError_InvalidTU: c_uint = 3;
pub type Enum_CXReparse_Flags = c_uint;
pub static CXReparse_None: c_uint = 0;
pub type Enum_CXTUResourceUsageKind = c_uint;
pub static CXTUResourceUsage_AST: c_uint = 1;
pub static CXTUResourceUsage_Identifiers: c_uint = 2;
pub static CXTUResourceUsage_Selectors: c_uint = 3;
pub static CXTUResourceUsage_GlobalCompletionResults: c_uint = 4;
pub static CXTUResourceUsage_SourceManagerContentCache: c_uint = 5;
pub static CXTUResourceUsage_AST_SideTables: c_uint = 6;
pub static CXTUResourceUsage_SourceManager_Membuffer_Malloc: c_uint = 7;
pub static CXTUResourceUsage_SourceManager_Membuffer_MMap: c_uint = 8;
pub static CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc: c_uint = 9;
pub static CXTUResourceUsage_ExternalASTSource_Membuffer_MMap: c_uint = 10;
pub static CXTUResourceUsage_Preprocessor: c_uint = 11;
pub static CXTUResourceUsage_PreprocessingRecord: c_uint = 12;
pub static CXTUResourceUsage_SourceManager_DataStructures: c_uint = 13;
pub static CXTUResourceUsage_Preprocessor_HeaderSearch: c_uint = 14;
pub static CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN: c_uint = 1;
pub static CXTUResourceUsage_MEMORY_IN_BYTES_END: c_uint = 14;
pub static CXTUResourceUsage_First: c_uint = 1;
pub static CXTUResourceUsage_Last: c_uint = 14;
pub struct Struct_CXTUResourceUsageEntry {
    kind: Enum_CXTUResourceUsageKind,
    amount: c_ulong,
}
pub type CXTUResourceUsageEntry = Struct_CXTUResourceUsageEntry;
pub struct Struct_CXTUResourceUsage {
    data: *mut c_void,
    numEntries: c_uint,
    entries: *mut CXTUResourceUsageEntry,
}
pub type CXTUResourceUsage = Struct_CXTUResourceUsage;
pub type Enum_CXCursorKind = c_uint;
pub static CXCursor_UnexposedDecl: c_uint = 1;
pub static CXCursor_StructDecl: c_uint = 2;
pub static CXCursor_UnionDecl: c_uint = 3;
pub static CXCursor_ClassDecl: c_uint = 4;
pub static CXCursor_EnumDecl: c_uint = 5;
pub static CXCursor_FieldDecl: c_uint = 6;
pub static CXCursor_EnumConstantDecl: c_uint = 7;
pub static CXCursor_FunctionDecl: c_uint = 8;
pub static CXCursor_VarDecl: c_uint = 9;
pub static CXCursor_ParmDecl: c_uint = 10;
pub static CXCursor_ObjCInterfaceDecl: c_uint = 11;
pub static CXCursor_ObjCCategoryDecl: c_uint = 12;
pub static CXCursor_ObjCProtocolDecl: c_uint = 13;
pub static CXCursor_ObjCPropertyDecl: c_uint = 14;
pub static CXCursor_ObjCIvarDecl: c_uint = 15;
pub static CXCursor_ObjCInstanceMethodDecl: c_uint = 16;
pub static CXCursor_ObjCClassMethodDecl: c_uint = 17;
pub static CXCursor_ObjCImplementationDecl: c_uint = 18;
pub static CXCursor_ObjCCategoryImplDecl: c_uint = 19;
pub static CXCursor_TypedefDecl: c_uint = 20;
pub static CXCursor_CXXMethod: c_uint = 21;
pub static CXCursor_Namespace: c_uint = 22;
pub static CXCursor_LinkageSpec: c_uint = 23;
pub static CXCursor_Constructor: c_uint = 24;
pub static CXCursor_Destructor: c_uint = 25;
pub static CXCursor_ConversionFunction: c_uint = 26;
pub static CXCursor_TemplateTypeParameter: c_uint = 27;
pub static CXCursor_NonTypeTemplateParameter: c_uint = 28;
pub static CXCursor_TemplateTemplateParameter: c_uint = 29;
pub static CXCursor_FunctionTemplate: c_uint = 30;
pub static CXCursor_ClassTemplate: c_uint = 31;
pub static CXCursor_ClassTemplatePartialSpecialization: c_uint = 32;
pub static CXCursor_NamespaceAlias: c_uint = 33;
pub static CXCursor_UsingDirective: c_uint = 34;
pub static CXCursor_UsingDeclaration: c_uint = 35;
pub static CXCursor_TypeAliasDecl: c_uint = 36;
pub static CXCursor_ObjCSynthesizeDecl: c_uint = 37;
pub static CXCursor_ObjCDynamicDecl: c_uint = 38;
pub static CXCursor_CXXAccessSpecifier: c_uint = 39;
pub static CXCursor_FirstDecl: c_uint = 1;
pub static CXCursor_LastDecl: c_uint = 39;
pub static CXCursor_FirstRef: c_uint = 40;
pub static CXCursor_ObjCSuperClassRef: c_uint = 40;
pub static CXCursor_ObjCProtocolRef: c_uint = 41;
pub static CXCursor_ObjCClassRef: c_uint = 42;
pub static CXCursor_TypeRef: c_uint = 43;
pub static CXCursor_CXXBaseSpecifier: c_uint = 44;
pub static CXCursor_TemplateRef: c_uint = 45;
pub static CXCursor_NamespaceRef: c_uint = 46;
pub static CXCursor_MemberRef: c_uint = 47;
pub static CXCursor_LabelRef: c_uint = 48;
pub static CXCursor_OverloadedDeclRef: c_uint = 49;
pub static CXCursor_VariableRef: c_uint = 50;
pub static CXCursor_LastRef: c_uint = 50;
pub static CXCursor_FirstInvalid: c_uint = 70;
pub static CXCursor_InvalidFile: c_uint = 70;
pub static CXCursor_NoDeclFound: c_uint = 71;
pub static CXCursor_NotImplemented: c_uint = 72;
pub static CXCursor_InvalidCode: c_uint = 73;
pub static CXCursor_LastInvalid: c_uint = 73;
pub static CXCursor_FirstExpr: c_uint = 100;
pub static CXCursor_UnexposedExpr: c_uint = 100;
pub static CXCursor_DeclRefExpr: c_uint = 101;
pub static CXCursor_MemberRefExpr: c_uint = 102;
pub static CXCursor_CallExpr: c_uint = 103;
pub static CXCursor_ObjCMessageExpr: c_uint = 104;
pub static CXCursor_BlockExpr: c_uint = 105;
pub static CXCursor_IntegerLiteral: c_uint = 106;
pub static CXCursor_FloatingLiteral: c_uint = 107;
pub static CXCursor_ImaginaryLiteral: c_uint = 108;
pub static CXCursor_StringLiteral: c_uint = 109;
pub static CXCursor_CharacterLiteral: c_uint = 110;
pub static CXCursor_ParenExpr: c_uint = 111;
pub static CXCursor_UnaryOperator: c_uint = 112;
pub static CXCursor_ArraySubscriptExpr: c_uint = 113;
pub static CXCursor_BinaryOperator: c_uint = 114;
pub static CXCursor_CompoundAssignOperator: c_uint = 115;
pub static CXCursor_ConditionalOperator: c_uint = 116;
pub static CXCursor_CStyleCastExpr: c_uint = 117;
pub static CXCursor_CompoundLiteralExpr: c_uint = 118;
pub static CXCursor_InitListExpr: c_uint = 119;
pub static CXCursor_AddrLabelExpr: c_uint = 120;
pub static CXCursor_StmtExpr: c_uint = 121;
pub static CXCursor_GenericSelectionExpr: c_uint = 122;
pub static CXCursor_GNUNullExpr: c_uint = 123;
pub static CXCursor_CXXStaticCastExpr: c_uint = 124;
pub static CXCursor_CXXDynamicCastExpr: c_uint = 125;
pub static CXCursor_CXXReinterpretCastExpr: c_uint = 126;
pub static CXCursor_CXXConstCastExpr: c_uint = 127;
pub static CXCursor_CXXFunctionalCastExpr: c_uint = 128;
pub static CXCursor_CXXTypeidExpr: c_uint = 129;
pub static CXCursor_CXXBoolLiteralExpr: c_uint = 130;
pub static CXCursor_CXXNullPtrLiteralExpr: c_uint = 131;
pub static CXCursor_CXXThisExpr: c_uint = 132;
pub static CXCursor_CXXThrowExpr: c_uint = 133;
pub static CXCursor_CXXNewExpr: c_uint = 134;
pub static CXCursor_CXXDeleteExpr: c_uint = 135;
pub static CXCursor_UnaryExpr: c_uint = 136;
pub static CXCursor_ObjCStringLiteral: c_uint = 137;
pub static CXCursor_ObjCEncodeExpr: c_uint = 138;
pub static CXCursor_ObjCSelectorExpr: c_uint = 139;
pub static CXCursor_ObjCProtocolExpr: c_uint = 140;
pub static CXCursor_ObjCBridgedCastExpr: c_uint = 141;
pub static CXCursor_PackExpansionExpr: c_uint = 142;
pub static CXCursor_SizeOfPackExpr: c_uint = 143;
pub static CXCursor_LambdaExpr: c_uint = 144;
pub static CXCursor_ObjCBoolLiteralExpr: c_uint = 145;
pub static CXCursor_ObjCSelfExpr: c_uint = 146;
pub static CXCursor_LastExpr: c_uint = 146;
pub static CXCursor_FirstStmt: c_uint = 200;
pub static CXCursor_UnexposedStmt: c_uint = 200;
pub static CXCursor_LabelStmt: c_uint = 201;
pub static CXCursor_CompoundStmt: c_uint = 202;
pub static CXCursor_CaseStmt: c_uint = 203;
pub static CXCursor_DefaultStmt: c_uint = 204;
pub static CXCursor_IfStmt: c_uint = 205;
pub static CXCursor_SwitchStmt: c_uint = 206;
pub static CXCursor_WhileStmt: c_uint = 207;
pub static CXCursor_DoStmt: c_uint = 208;
pub static CXCursor_ForStmt: c_uint = 209;
pub static CXCursor_GotoStmt: c_uint = 210;
pub static CXCursor_IndirectGotoStmt: c_uint = 211;
pub static CXCursor_ContinueStmt: c_uint = 212;
pub static CXCursor_BreakStmt: c_uint = 213;
pub static CXCursor_ReturnStmt: c_uint = 214;
pub static CXCursor_GCCAsmStmt: c_uint = 215;
pub static CXCursor_AsmStmt: c_uint = 215;
pub static CXCursor_ObjCAtTryStmt: c_uint = 216;
pub static CXCursor_ObjCAtCatchStmt: c_uint = 217;
pub static CXCursor_ObjCAtFinallyStmt: c_uint = 218;
pub static CXCursor_ObjCAtThrowStmt: c_uint = 219;
pub static CXCursor_ObjCAtSynchronizedStmt: c_uint = 220;
pub static CXCursor_ObjCAutoreleasePoolStmt: c_uint = 221;
pub static CXCursor_ObjCForCollectionStmt: c_uint = 222;
pub static CXCursor_CXXCatchStmt: c_uint = 223;
pub static CXCursor_CXXTryStmt: c_uint = 224;
pub static CXCursor_CXXForRangeStmt: c_uint = 225;
pub static CXCursor_SEHTryStmt: c_uint = 226;
pub static CXCursor_SEHExceptStmt: c_uint = 227;
pub static CXCursor_SEHFinallyStmt: c_uint = 228;
pub static CXCursor_MSAsmStmt: c_uint = 229;
pub static CXCursor_NullStmt: c_uint = 230;
pub static CXCursor_DeclStmt: c_uint = 231;
pub static CXCursor_LastStmt: c_uint = 231;
pub static CXCursor_TranslationUnit: c_uint = 300;
pub static CXCursor_FirstAttr: c_uint = 400;
pub static CXCursor_UnexposedAttr: c_uint = 400;
pub static CXCursor_IBActionAttr: c_uint = 401;
pub static CXCursor_IBOutletAttr: c_uint = 402;
pub static CXCursor_IBOutletCollectionAttr: c_uint = 403;
pub static CXCursor_CXXFinalAttr: c_uint = 404;
pub static CXCursor_CXXOverrideAttr: c_uint = 405;
pub static CXCursor_AnnotateAttr: c_uint = 406;
pub static CXCursor_AsmLabelAttr: c_uint = 407;
pub static CXCursor_LastAttr: c_uint = 407;
pub static CXCursor_PreprocessingDirective: c_uint = 500;
pub static CXCursor_MacroDefinition: c_uint = 501;
pub static CXCursor_MacroExpansion: c_uint = 502;
pub static CXCursor_MacroInstantiation: c_uint = 502;
pub static CXCursor_InclusionDirective: c_uint = 503;
pub static CXCursor_FirstPreprocessing: c_uint = 500;
pub static CXCursor_LastPreprocessing: c_uint = 503;
pub static CXCursor_ModuleImportDecl: c_uint = 600;
pub static CXCursor_FirstExtraDecl: c_uint = 600;
pub static CXCursor_LastExtraDecl: c_uint = 600;
pub struct CXCursor {
    kind: Enum_CXCursorKind,
    xdata: c_int,
    data: [*c_void, ..3u],
}
pub struct CXComment {
    ASTNode: *c_void,
    TranslationUnit: CXTranslationUnit,
}
pub type Enum_CXLinkageKind = c_uint;
pub static CXLinkage_Invalid: c_uint = 0;
pub static CXLinkage_NoLinkage: c_uint = 1;
pub static CXLinkage_Internal: c_uint = 2;
pub static CXLinkage_UniqueExternal: c_uint = 3;
pub static CXLinkage_External: c_uint = 4;
pub struct Struct_CXPlatformAvailability {
    Platform: CXString,
    Introduced: CXVersion,
    Deprecated: CXVersion,
    Obsoleted: CXVersion,
    Unavailable: c_int,
    Message: CXString,
}
pub type CXPlatformAvailability = Struct_CXPlatformAvailability;
pub type Enum_CXLanguageKind = c_uint;
pub static CXLanguage_Invalid: c_uint = 0;
pub static CXLanguage_C: c_uint = 1;
pub static CXLanguage_ObjC: c_uint = 2;
pub static CXLanguage_CPlusPlus: c_uint = 3;
pub type Struct_CXCursorSetImpl = c_void;
pub type CXCursorSet = *mut Struct_CXCursorSetImpl;
pub type Enum_CXTypeKind = c_uint;
pub static CXType_Invalid: c_uint = 0;
pub static CXType_Unexposed: c_uint = 1;
pub static CXType_Void: c_uint = 2;
pub static CXType_Bool: c_uint = 3;
pub static CXType_Char_U: c_uint = 4;
pub static CXType_UChar: c_uint = 5;
pub static CXType_Char16: c_uint = 6;
pub static CXType_Char32: c_uint = 7;
pub static CXType_UShort: c_uint = 8;
pub static CXType_UInt: c_uint = 9;
pub static CXType_ULong: c_uint = 10;
pub static CXType_ULongLong: c_uint = 11;
pub static CXType_UInt128: c_uint = 12;
pub static CXType_Char_S: c_uint = 13;
pub static CXType_SChar: c_uint = 14;
pub static CXType_WChar: c_uint = 15;
pub static CXType_Short: c_uint = 16;
pub static CXType_Int: c_uint = 17;
pub static CXType_Long: c_uint = 18;
pub static CXType_LongLong: c_uint = 19;
pub static CXType_Int128: c_uint = 20;
pub static CXType_Float: c_uint = 21;
pub static CXType_Double: c_uint = 22;
pub static CXType_LongDouble: c_uint = 23;
pub static CXType_NullPtr: c_uint = 24;
pub static CXType_Overload: c_uint = 25;
pub static CXType_Dependent: c_uint = 26;
pub static CXType_ObjCId: c_uint = 27;
pub static CXType_ObjCClass: c_uint = 28;
pub static CXType_ObjCSel: c_uint = 29;
pub static CXType_FirstBuiltin: c_uint = 2;
pub static CXType_LastBuiltin: c_uint = 29;
pub static CXType_Complex: c_uint = 100;
pub static CXType_Pointer: c_uint = 101;
pub static CXType_BlockPointer: c_uint = 102;
pub static CXType_LValueReference: c_uint = 103;
pub static CXType_RValueReference: c_uint = 104;
pub static CXType_Record: c_uint = 105;
pub static CXType_Enum: c_uint = 106;
pub static CXType_Typedef: c_uint = 107;
pub static CXType_ObjCInterface: c_uint = 108;
pub static CXType_ObjCObjectPointer: c_uint = 109;
pub static CXType_FunctionNoProto: c_uint = 110;
pub static CXType_FunctionProto: c_uint = 111;
pub static CXType_ConstantArray: c_uint = 112;
pub static CXType_Vector: c_uint = 113;
pub type Enum_CXCallingConv = c_uint;
pub static CXCallingConv_Default: c_uint = 0;
pub static CXCallingConv_C: c_uint = 1;
pub static CXCallingConv_X86StdCall: c_uint = 2;
pub static CXCallingConv_X86FastCall: c_uint = 3;
pub static CXCallingConv_X86ThisCall: c_uint = 4;
pub static CXCallingConv_X86Pascal: c_uint = 5;
pub static CXCallingConv_AAPCS: c_uint = 6;
pub static CXCallingConv_AAPCS_VFP: c_uint = 7;
pub static CXCallingConv_PnaclCall: c_uint = 8;
pub static CXCallingConv_IntelOclBicc: c_uint = 9;
pub static CXCallingConv_Invalid: c_uint = 100;
pub static CXCallingConv_Unexposed: c_uint = 200;
pub struct CXType {
    kind: Enum_CXTypeKind,
    data: [*mut c_void, ..2u],
}
pub type Enum_CXTypeLayoutError = c_int;
pub static CXTypeLayoutError_Invalid: c_int = -1;
pub static CXTypeLayoutError_Incomplete: c_int = -2;
pub static CXTypeLayoutError_Dependent: c_int = -3;
pub static CXTypeLayoutError_NotConstantSize: c_int = -4;
pub static CXTypeLayoutError_InvalidFieldName: c_int = -5;
pub type Enum_CX_CXXAccessSpecifier = c_uint;
pub static CX_CXXInvalidAccessSpecifier: c_uint = 0;
pub static CX_CXXPublic: c_uint = 1;
pub static CX_CXXProtected: c_uint = 2;
pub static CX_CXXPrivate: c_uint = 3;
pub type Enum_CXChildVisitResult = c_uint;
pub static CXChildVisit_Break: c_uint = 0;
pub static CXChildVisit_Continue: c_uint = 1;
pub static CXChildVisit_Recurse: c_uint = 2;
pub type CXCursorVisitor =
    extern "C" fn(arg1: CXCursor, arg2: CXCursor, arg3: CXClientData)
        -> Enum_CXChildVisitResult;
pub type CXObjCPropertyAttrKind = c_uint;
pub static CXObjCPropertyAttr_noattr: c_uint = 0;
pub static CXObjCPropertyAttr_readonly: c_uint = 1;
pub static CXObjCPropertyAttr_getter: c_uint = 2;
pub static CXObjCPropertyAttr_assign: c_uint = 4;
pub static CXObjCPropertyAttr_readwrite: c_uint = 8;
pub static CXObjCPropertyAttr_retain: c_uint = 16;
pub static CXObjCPropertyAttr_copy: c_uint = 32;
pub static CXObjCPropertyAttr_nonatomic: c_uint = 64;
pub static CXObjCPropertyAttr_setter: c_uint = 128;
pub static CXObjCPropertyAttr_atomic: c_uint = 256;
pub static CXObjCPropertyAttr_weak: c_uint = 512;
pub static CXObjCPropertyAttr_strong: c_uint = 1024;
pub static CXObjCPropertyAttr_unsafe_unretained: c_uint = 2048;
pub type CXObjCDeclQualifierKind = c_uint;
pub static CXObjCDeclQualifier_None: c_uint = 0;
pub static CXObjCDeclQualifier_In: c_uint = 1;
pub static CXObjCDeclQualifier_Inout: c_uint = 2;
pub static CXObjCDeclQualifier_Out: c_uint = 4;
pub static CXObjCDeclQualifier_Bycopy: c_uint = 8;
pub static CXObjCDeclQualifier_Byref: c_uint = 16;
pub static CXObjCDeclQualifier_Oneway: c_uint = 32;
pub type CXModule = *mut c_void;
pub type Enum_CXCommentKind = c_uint;
pub static CXComment_Null: c_uint = 0;
pub static CXComment_Text: c_uint = 1;
pub static CXComment_InlineCommand: c_uint = 2;
pub static CXComment_HTMLStartTag: c_uint = 3;
pub static CXComment_HTMLEndTag: c_uint = 4;
pub static CXComment_Paragraph: c_uint = 5;
pub static CXComment_BlockCommand: c_uint = 6;
pub static CXComment_ParamCommand: c_uint = 7;
pub static CXComment_TParamCommand: c_uint = 8;
pub static CXComment_VerbatimBlockCommand: c_uint = 9;
pub static CXComment_VerbatimBlockLine: c_uint = 10;
pub static CXComment_VerbatimLine: c_uint = 11;
pub static CXComment_FullComment: c_uint = 12;
pub type Enum_CXCommentInlineCommandRenderKind = c_uint;
pub static CXCommentInlineCommandRenderKind_Normal: c_uint = 0;
pub static CXCommentInlineCommandRenderKind_Bold: c_uint = 1;
pub static CXCommentInlineCommandRenderKind_Monospaced: c_uint = 2;
pub static CXCommentInlineCommandRenderKind_Emphasized: c_uint = 3;
pub type Enum_CXCommentParamPassDirection = c_uint;
pub static CXCommentParamPassDirection_In: c_uint = 0;
pub static CXCommentParamPassDirection_Out: c_uint = 1;
pub static CXCommentParamPassDirection_InOut: c_uint = 2;
pub type Enum_CXNameRefFlags = c_uint;
pub static CXNameRange_WantQualifier: c_uint = 1;
pub static CXNameRange_WantTemplateArgs: c_uint = 2;
pub static CXNameRange_WantSinglePiece: c_uint = 4;
pub type Enum_CXTokenKind = c_uint;
pub static CXToken_Punctuation: c_uint = 0;
pub static CXToken_Keyword: c_uint = 1;
pub static CXToken_Identifier: c_uint = 2;
pub static CXToken_Literal: c_uint = 3;
pub static CXToken_Comment: c_uint = 4;
pub type CXTokenKind = Enum_CXTokenKind;
pub struct CXToken {
    int_data: [c_uint, ..4u],
    ptr_data: *mut c_void,
}
pub type CXCompletionString = *mut c_void;
pub struct CXCompletionResult {
    CursorKind: Enum_CXCursorKind,
    CompletionString: CXCompletionString,
}
pub type Enum_CXCompletionChunkKind = c_uint;
pub static CXCompletionChunk_Optional: c_uint = 0;
pub static CXCompletionChunk_TypedText: c_uint = 1;
pub static CXCompletionChunk_Text: c_uint = 2;
pub static CXCompletionChunk_Placeholder: c_uint = 3;
pub static CXCompletionChunk_Informative: c_uint = 4;
pub static CXCompletionChunk_CurrentParameter: c_uint = 5;
pub static CXCompletionChunk_LeftParen: c_uint = 6;
pub static CXCompletionChunk_RightParen: c_uint = 7;
pub static CXCompletionChunk_LeftBracket: c_uint = 8;
pub static CXCompletionChunk_RightBracket: c_uint = 9;
pub static CXCompletionChunk_LeftBrace: c_uint = 10;
pub static CXCompletionChunk_RightBrace: c_uint = 11;
pub static CXCompletionChunk_LeftAngle: c_uint = 12;
pub static CXCompletionChunk_RightAngle: c_uint = 13;
pub static CXCompletionChunk_Comma: c_uint = 14;
pub static CXCompletionChunk_ResultType: c_uint = 15;
pub static CXCompletionChunk_Colon: c_uint = 16;
pub static CXCompletionChunk_SemiColon: c_uint = 17;
pub static CXCompletionChunk_Equal: c_uint = 18;
pub static CXCompletionChunk_HorizontalSpace: c_uint = 19;
pub static CXCompletionChunk_VerticalSpace: c_uint = 20;
pub struct CXCodeCompleteResults {
    Results: *mut CXCompletionResult,
    NumResults: c_uint,
}
pub type Enum_CXCodeComplete_Flags = c_uint;
pub static CXCodeComplete_IncludeMacros: c_uint = 1;
pub static CXCodeComplete_IncludeCodePatterns: c_uint = 2;
pub static CXCodeComplete_IncludeBriefComments: c_uint = 4;
pub type Enum_CXCompletionContext = c_uint;
pub static CXCompletionContext_Unexposed: c_uint = 0;
pub static CXCompletionContext_AnyType: c_uint = 1;
pub static CXCompletionContext_AnyValue: c_uint = 2;
pub static CXCompletionContext_ObjCObjectValue: c_uint = 4;
pub static CXCompletionContext_ObjCSelectorValue: c_uint = 8;
pub static CXCompletionContext_CXXClassTypeValue: c_uint = 16;
pub static CXCompletionContext_DotMemberAccess: c_uint = 32;
pub static CXCompletionContext_ArrowMemberAccess: c_uint = 64;
pub static CXCompletionContext_ObjCPropertyAccess: c_uint = 128;
pub static CXCompletionContext_EnumTag: c_uint = 256;
pub static CXCompletionContext_UnionTag: c_uint = 512;
pub static CXCompletionContext_StructTag: c_uint = 1024;
pub static CXCompletionContext_ClassTag: c_uint = 2048;
pub static CXCompletionContext_Namespace: c_uint = 4096;
pub static CXCompletionContext_NestedNameSpecifier: c_uint = 8192;
pub static CXCompletionContext_ObjCInterface: c_uint = 16384;
pub static CXCompletionContext_ObjCProtocol: c_uint = 32768;
pub static CXCompletionContext_ObjCCategory: c_uint = 65536;
pub static CXCompletionContext_ObjCInstanceMessage: c_uint = 131072;
pub static CXCompletionContext_ObjCClassMessage: c_uint = 262144;
pub static CXCompletionContext_ObjCSelectorName: c_uint = 524288;
pub static CXCompletionContext_MacroName: c_uint = 1048576;
pub static CXCompletionContext_NaturalLanguage: c_uint = 2097152;
pub static CXCompletionContext_Unknown: c_uint = 4194303;
pub type CXInclusionVisitor =
    extern "C" fn
        (arg1: CXFile, arg2: *mut CXSourceLocation, arg3: c_uint,
         arg4: CXClientData);
pub type CXRemapping = *mut c_void;
pub type Enum_CXVisitorResult = c_uint;
pub static CXVisit_Break: c_uint = 0;
pub static CXVisit_Continue: c_uint = 1;
pub struct CXCursorAndRangeVisitor {
    context: *mut c_void,
    visit: extern "C" fn
               (arg1: *mut c_void, arg2: CXCursor, arg3: CXSourceRange)
               -> Enum_CXVisitorResult,
}
pub type CXResult = c_uint;
pub static CXResult_Success: c_uint = 0;
pub static CXResult_Invalid: c_uint = 1;
pub static CXResult_VisitBreak: c_uint = 2;
pub type CXIdxClientFile = *mut c_void;
pub type CXIdxClientEntity = *mut c_void;
pub type CXIdxClientContainer = *mut c_void;
pub type CXIdxClientASTFile = *mut c_void;
pub struct CXIdxLoc {
    ptr_data: [*mut c_void, ..2u],
    int_data: c_uint,
}
pub struct CXIdxIncludedFileInfo {
    hashLoc: CXIdxLoc,
    filename: *c_schar,
    file: CXFile,
    isImport: c_int,
    isAngled: c_int,
    isModuleImport: c_int,
}
pub struct CXIdxImportedASTFileInfo {
    file: CXFile,
    module: CXModule,
    loc: CXIdxLoc,
    isImplicit: c_int,
}
pub type CXIdxEntityKind = c_uint;
pub static CXIdxEntity_Unexposed: c_uint = 0;
pub static CXIdxEntity_Typedef: c_uint = 1;
pub static CXIdxEntity_Function: c_uint = 2;
pub static CXIdxEntity_Variable: c_uint = 3;
pub static CXIdxEntity_Field: c_uint = 4;
pub static CXIdxEntity_EnumConstant: c_uint = 5;
pub static CXIdxEntity_ObjCClass: c_uint = 6;
pub static CXIdxEntity_ObjCProtocol: c_uint = 7;
pub static CXIdxEntity_ObjCCategory: c_uint = 8;
pub static CXIdxEntity_ObjCInstanceMethod: c_uint = 9;
pub static CXIdxEntity_ObjCClassMethod: c_uint = 10;
pub static CXIdxEntity_ObjCProperty: c_uint = 11;
pub static CXIdxEntity_ObjCIvar: c_uint = 12;
pub static CXIdxEntity_Enum: c_uint = 13;
pub static CXIdxEntity_Struct: c_uint = 14;
pub static CXIdxEntity_Union: c_uint = 15;
pub static CXIdxEntity_CXXClass: c_uint = 16;
pub static CXIdxEntity_CXXNamespace: c_uint = 17;
pub static CXIdxEntity_CXXNamespaceAlias: c_uint = 18;
pub static CXIdxEntity_CXXStaticVariable: c_uint = 19;
pub static CXIdxEntity_CXXStaticMethod: c_uint = 20;
pub static CXIdxEntity_CXXInstanceMethod: c_uint = 21;
pub static CXIdxEntity_CXXConstructor: c_uint = 22;
pub static CXIdxEntity_CXXDestructor: c_uint = 23;
pub static CXIdxEntity_CXXConversionFunction: c_uint = 24;
pub static CXIdxEntity_CXXTypeAlias: c_uint = 25;
pub static CXIdxEntity_CXXInterface: c_uint = 26;
pub type CXIdxEntityLanguage = c_uint;
pub static CXIdxEntityLang_None: c_uint = 0;
pub static CXIdxEntityLang_C: c_uint = 1;
pub static CXIdxEntityLang_ObjC: c_uint = 2;
pub static CXIdxEntityLang_CXX: c_uint = 3;
pub type CXIdxEntityCXXTemplateKind = c_uint;
pub static CXIdxEntity_NonTemplate: c_uint = 0;
pub static CXIdxEntity_Template: c_uint = 1;
pub static CXIdxEntity_TemplatePartialSpecialization: c_uint = 2;
pub static CXIdxEntity_TemplateSpecialization: c_uint = 3;
pub type CXIdxAttrKind = c_uint;
pub static CXIdxAttr_Unexposed: c_uint = 0;
pub static CXIdxAttr_IBAction: c_uint = 1;
pub static CXIdxAttr_IBOutlet: c_uint = 2;
pub static CXIdxAttr_IBOutletCollection: c_uint = 3;
pub struct CXIdxAttrInfo {
    kind: CXIdxAttrKind,
    cursor: CXCursor,
    loc: CXIdxLoc,
}
pub struct CXIdxEntityInfo {
    kind: CXIdxEntityKind,
    templateKind: CXIdxEntityCXXTemplateKind,
    lang: CXIdxEntityLanguage,
    name: *c_schar,
    USR: *c_schar,
    cursor: CXCursor,
    attributes: **CXIdxAttrInfo,
    numAttributes: c_uint,
}
pub struct CXIdxContainerInfo {
    cursor: CXCursor,
}
pub struct CXIdxIBOutletCollectionAttrInfo {
    attrInfo: *CXIdxAttrInfo,
    objcClass: *CXIdxEntityInfo,
    classCursor: CXCursor,
    classLoc: CXIdxLoc,
}
pub type CXIdxDeclInfoFlags = c_uint;
pub static CXIdxDeclFlag_Skipped: c_uint = 1;
pub struct CXIdxDeclInfo {
    entityInfo: *CXIdxEntityInfo,
    cursor: CXCursor,
    loc: CXIdxLoc,
    semanticContainer: *CXIdxContainerInfo,
    lexicalContainer: *CXIdxContainerInfo,
    isRedeclaration: c_int,
    isDefinition: c_int,
    isContainer: c_int,
    declAsContainer: *CXIdxContainerInfo,
    isImplicit: c_int,
    attributes: **CXIdxAttrInfo,
    numAttributes: c_uint,
    flags: c_uint,
}
pub type CXIdxObjCContainerKind = c_uint;
pub static CXIdxObjCContainer_ForwardRef: c_uint = 0;
pub static CXIdxObjCContainer_Interface: c_uint = 1;
pub static CXIdxObjCContainer_Implementation: c_uint = 2;
pub struct CXIdxObjCContainerDeclInfo {
    declInfo: *CXIdxDeclInfo,
    kind: CXIdxObjCContainerKind,
}
pub struct CXIdxBaseClassInfo {
    base: *CXIdxEntityInfo,
    cursor: CXCursor,
    loc: CXIdxLoc,
}
pub struct CXIdxObjCProtocolRefInfo {
    protocol: *CXIdxEntityInfo,
    cursor: CXCursor,
    loc: CXIdxLoc,
}
pub struct CXIdxObjCProtocolRefListInfo {
    protocols: **CXIdxObjCProtocolRefInfo,
    numProtocols: c_uint,
}
pub struct CXIdxObjCInterfaceDeclInfo {
    containerInfo: *CXIdxObjCContainerDeclInfo,
    superInfo: *CXIdxBaseClassInfo,
    protocols: *CXIdxObjCProtocolRefListInfo,
}
pub struct CXIdxObjCCategoryDeclInfo {
    containerInfo: *CXIdxObjCContainerDeclInfo,
    objcClass: *CXIdxEntityInfo,
    classCursor: CXCursor,
    classLoc: CXIdxLoc,
    protocols: *CXIdxObjCProtocolRefListInfo,
}
pub struct CXIdxObjCPropertyDeclInfo {
    declInfo: *CXIdxDeclInfo,
    getter: *CXIdxEntityInfo,
    setter: *CXIdxEntityInfo,
}
pub struct CXIdxCXXClassDeclInfo {
    declInfo: *CXIdxDeclInfo,
    bases: **CXIdxBaseClassInfo,
    numBases: c_uint,
}
pub type CXIdxEntityRefKind = c_uint;
pub static CXIdxEntityRef_Direct: c_uint = 1;
pub static CXIdxEntityRef_Implicit: c_uint = 2;
pub struct CXIdxEntityRefInfo {
    kind: CXIdxEntityRefKind,
    cursor: CXCursor,
    loc: CXIdxLoc,
    referencedEntity: *CXIdxEntityInfo,
    parentEntity: *CXIdxEntityInfo,
    container: *CXIdxContainerInfo,
}
pub struct IndexerCallbacks {
    abortQuery: extern "C" fn(arg1: CXClientData, arg2: *mut c_void) -> c_int,
    diagnostic: extern "C" fn
                    (arg1: CXClientData, arg2: CXDiagnosticSet,
                     arg3: *mut c_void),
    enteredMainFile: extern "C" fn
                         (arg1: CXClientData, arg2: CXFile, arg3: *mut c_void)
                         -> CXIdxClientFile,
    ppIncludedFile: extern "C" fn
                        (arg1: CXClientData, arg2: *CXIdxIncludedFileInfo)
                        -> CXIdxClientFile,
    importedASTFile: extern "C" fn
                         (arg1: CXClientData, arg2: *CXIdxImportedASTFileInfo)
                         -> CXIdxClientASTFile,
    startedTranslationUnit: extern "C" fn
                                (arg1: CXClientData, arg2: *mut c_void)
                                -> CXIdxClientContainer,
    indexDeclaration: extern "C" fn(arg1: CXClientData, arg2: *CXIdxDeclInfo),
    indexEntityReference: extern "C" fn
                              (arg1: CXClientData, arg2: *CXIdxEntityRefInfo),
}
pub type CXIndexAction = *mut c_void;
pub type CXIndexOptFlags = c_uint;
pub static CXIndexOpt_None: c_uint = 0;
pub static CXIndexOpt_SuppressRedundantRefs: c_uint = 1;
pub static CXIndexOpt_IndexFunctionLocalSymbols: c_uint = 2;
pub static CXIndexOpt_IndexImplicitTemplateInstantiations: c_uint = 4;
pub static CXIndexOpt_SuppressWarnings: c_uint = 8;
pub static CXIndexOpt_SkipParsedBodiesInSession: c_uint = 16;
#[link_args = "-lclang"]
extern "C" {
    pub fn clang_getCString(string: CXString) -> *c_schar;
    pub fn clang_disposeString(string: CXString);
    pub fn clang_createIndex(excludeDeclarationsFromPCH: c_int,
                             displayDiagnostics: c_int) -> CXIndex;
    pub fn clang_disposeIndex(index: CXIndex);
    pub fn clang_CXIndex_setGlobalOptions(arg1: CXIndex, options: c_uint);
    pub fn clang_CXIndex_getGlobalOptions(arg1: CXIndex) -> c_uint;
    pub fn clang_getFileName(SFile: CXFile) -> CXString;
    pub fn clang_getFileTime(SFile: CXFile) -> time_t;
    pub fn clang_getFileUniqueID(file: CXFile, outID: *mut CXFileUniqueID) ->
     c_int;
    pub fn clang_isFileMultipleIncludeGuarded(tu: CXTranslationUnit,
                                              file: CXFile) -> c_uint;
    pub fn clang_getFile(tu: CXTranslationUnit, file_name: *c_schar) ->
     CXFile;
    pub fn clang_getNullLocation() -> CXSourceLocation;
    pub fn clang_equalLocations(loc1: CXSourceLocation,
                                loc2: CXSourceLocation) -> c_uint;
    pub fn clang_getLocation(tu: CXTranslationUnit, file: CXFile,
                             line: c_uint, column: c_uint) ->
     CXSourceLocation;
    pub fn clang_getLocationForOffset(tu: CXTranslationUnit, file: CXFile,
                                      offset: c_uint) -> CXSourceLocation;
    pub fn clang_Location_isInSystemHeader(location: CXSourceLocation) ->
     c_int;
    pub fn clang_getNullRange() -> CXSourceRange;
    pub fn clang_getRange(begin: CXSourceLocation, end: CXSourceLocation) ->
     CXSourceRange;
    pub fn clang_equalRanges(range1: CXSourceRange, range2: CXSourceRange) ->
     c_uint;
    pub fn clang_Range_isNull(range: CXSourceRange) -> c_int;
    pub fn clang_getExpansionLocation(location: CXSourceLocation,
                                      file: *mut CXFile, line: *mut c_uint,
                                      column: *mut c_uint,
                                      offset: *mut c_uint);
    pub fn clang_getPresumedLocation(location: CXSourceLocation,
                                     filename: *mut CXString,
                                     line: *mut c_uint, column: *mut c_uint);
    pub fn clang_getInstantiationLocation(location: CXSourceLocation,
                                          file: *mut CXFile,
                                          line: *mut c_uint,
                                          column: *mut c_uint,
                                          offset: *mut c_uint);
    pub fn clang_getSpellingLocation(location: CXSourceLocation,
                                     file: *mut CXFile, line: *mut c_uint,
                                     column: *mut c_uint,
                                     offset: *mut c_uint);
    pub fn clang_getFileLocation(location: CXSourceLocation,
                                 file: *mut CXFile, line: *mut c_uint,
                                 column: *mut c_uint, offset: *mut c_uint);
    pub fn clang_getRangeStart(range: CXSourceRange) -> CXSourceLocation;
    pub fn clang_getRangeEnd(range: CXSourceRange) -> CXSourceLocation;
    pub fn clang_getNumDiagnosticsInSet(Diags: CXDiagnosticSet) -> c_uint;
    pub fn clang_getDiagnosticInSet(Diags: CXDiagnosticSet, Index: c_uint) ->
     CXDiagnostic;
    pub fn clang_loadDiagnostics(file: *c_schar,
                                 error: *mut Enum_CXLoadDiag_Error,
                                 errorString: *mut CXString) ->
     CXDiagnosticSet;
    pub fn clang_disposeDiagnosticSet(Diags: CXDiagnosticSet);
    pub fn clang_getChildDiagnostics(D: CXDiagnostic) -> CXDiagnosticSet;
    pub fn clang_getNumDiagnostics(Unit: CXTranslationUnit) -> c_uint;
    pub fn clang_getDiagnostic(Unit: CXTranslationUnit, Index: c_uint) ->
     CXDiagnostic;
    pub fn clang_getDiagnosticSetFromTU(Unit: CXTranslationUnit) ->
     CXDiagnosticSet;
    pub fn clang_disposeDiagnostic(Diagnostic: CXDiagnostic);
    pub fn clang_formatDiagnostic(Diagnostic: CXDiagnostic, Options: c_uint)
     -> CXString;
    pub fn clang_defaultDiagnosticDisplayOptions() -> c_uint;
    pub fn clang_getDiagnosticSeverity(arg1: CXDiagnostic) ->
     Enum_CXDiagnosticSeverity;
    pub fn clang_getDiagnosticLocation(arg1: CXDiagnostic) ->
     CXSourceLocation;
    pub fn clang_getDiagnosticSpelling(arg1: CXDiagnostic) -> CXString;
    pub fn clang_getDiagnosticOption(Diag: CXDiagnostic,
                                     Disable: *mut CXString) -> CXString;
    pub fn clang_getDiagnosticCategory(arg1: CXDiagnostic) -> c_uint;
    pub fn clang_getDiagnosticCategoryName(Category: c_uint) -> CXString;
    pub fn clang_getDiagnosticCategoryText(arg1: CXDiagnostic) -> CXString;
    pub fn clang_getDiagnosticNumRanges(arg1: CXDiagnostic) -> c_uint;
    pub fn clang_getDiagnosticRange(Diagnostic: CXDiagnostic, Range: c_uint)
     -> CXSourceRange;
    pub fn clang_getDiagnosticNumFixIts(Diagnostic: CXDiagnostic) -> c_uint;
    pub fn clang_getDiagnosticFixIt(Diagnostic: CXDiagnostic, FixIt: c_uint,
                                    ReplacementRange: *mut CXSourceRange) ->
     CXString;
    pub fn clang_getTranslationUnitSpelling(CTUnit: CXTranslationUnit) ->
     CXString;
    pub fn clang_createTranslationUnitFromSourceFile(CIdx: CXIndex,
                                                     source_filename:
                                                         *c_schar,
                                                     num_clang_command_line_args:
                                                         c_int,
                                                     clang_command_line_args:
                                                         **c_schar,
                                                     num_unsaved_files:
                                                         c_uint,
                                                     unsaved_files:
                                                         *mut Struct_CXUnsavedFile)
     -> CXTranslationUnit;
    pub fn clang_createTranslationUnit(arg1: CXIndex, ast_filename: *c_schar)
     -> CXTranslationUnit;
    pub fn clang_defaultEditingTranslationUnitOptions() -> c_uint;
    pub fn clang_parseTranslationUnit(CIdx: CXIndex,
                                      source_filename: *c_schar,
                                      command_line_args: **c_schar,
                                      num_command_line_args: c_int,
                                      unsaved_files:
                                          *mut Struct_CXUnsavedFile,
                                      num_unsaved_files: c_uint,
                                      options: c_uint) -> CXTranslationUnit;
    pub fn clang_defaultSaveOptions(TU: CXTranslationUnit) -> c_uint;
    pub fn clang_saveTranslationUnit(TU: CXTranslationUnit,
                                     FileName: *c_schar, options: c_uint) ->
     c_int;
    pub fn clang_disposeTranslationUnit(arg1: CXTranslationUnit);
    pub fn clang_defaultReparseOptions(TU: CXTranslationUnit) -> c_uint;
    pub fn clang_reparseTranslationUnit(TU: CXTranslationUnit,
                                        num_unsaved_files: c_uint,
                                        unsaved_files:
                                            *mut Struct_CXUnsavedFile,
                                        options: c_uint) -> c_int;
    pub fn clang_getTUResourceUsageName(kind: Enum_CXTUResourceUsageKind) ->
     *c_schar;
    pub fn clang_getCXTUResourceUsage(TU: CXTranslationUnit) ->
     CXTUResourceUsage;
    pub fn clang_disposeCXTUResourceUsage(usage: CXTUResourceUsage);
    pub fn clang_getNullCursor() -> CXCursor;
    pub fn clang_getTranslationUnitCursor(arg1: CXTranslationUnit) ->
     CXCursor;
    pub fn clang_equalCursors(arg1: CXCursor, arg2: CXCursor) -> c_uint;
    pub fn clang_Cursor_isNull(cursor: CXCursor) -> c_int;
    pub fn clang_hashCursor(arg1: CXCursor) -> c_uint;
    pub fn clang_getCursorKind(arg1: CXCursor) -> Enum_CXCursorKind;
    pub fn clang_isDeclaration(arg1: Enum_CXCursorKind) -> c_uint;
    pub fn clang_isReference(arg1: Enum_CXCursorKind) -> c_uint;
    pub fn clang_isExpression(arg1: Enum_CXCursorKind) -> c_uint;
    pub fn clang_isStatement(arg1: Enum_CXCursorKind) -> c_uint;
    pub fn clang_isAttribute(arg1: Enum_CXCursorKind) -> c_uint;
    pub fn clang_isInvalid(arg1: Enum_CXCursorKind) -> c_uint;
    pub fn clang_isTranslationUnit(arg1: Enum_CXCursorKind) -> c_uint;
    pub fn clang_isPreprocessing(arg1: Enum_CXCursorKind) -> c_uint;
    pub fn clang_isUnexposed(arg1: Enum_CXCursorKind) -> c_uint;
    pub fn clang_getCursorLinkage(cursor: CXCursor) -> Enum_CXLinkageKind;
    pub fn clang_getCursorAvailability(cursor: CXCursor) ->
     Enum_CXAvailabilityKind;
    pub fn clang_getCursorPlatformAvailability(cursor: CXCursor,
                                               always_deprecated: *mut c_int,
                                               deprecated_message:
                                                   *mut CXString,
                                               always_unavailable: *mut c_int,
                                               unavailable_message:
                                                   *mut CXString,
                                               availability:
                                                   *mut CXPlatformAvailability,
                                               availability_size: c_int) ->
     c_int;
    pub fn clang_disposeCXPlatformAvailability(availability:
                                                   *mut CXPlatformAvailability);
    pub fn clang_getCursorLanguage(cursor: CXCursor) -> Enum_CXLanguageKind;
    pub fn clang_Cursor_getTranslationUnit(arg1: CXCursor) ->
     CXTranslationUnit;
    pub fn clang_createCXCursorSet() -> CXCursorSet;
    pub fn clang_disposeCXCursorSet(cset: CXCursorSet);
    pub fn clang_CXCursorSet_contains(cset: CXCursorSet, cursor: CXCursor) ->
     c_uint;
    pub fn clang_CXCursorSet_insert(cset: CXCursorSet, cursor: CXCursor) ->
     c_uint;
    pub fn clang_getCursorSemanticParent(cursor: CXCursor) -> CXCursor;
    pub fn clang_getCursorLexicalParent(cursor: CXCursor) -> CXCursor;
    pub fn clang_getOverriddenCursors(cursor: CXCursor,
                                      overridden: *mut *mut CXCursor,
                                      num_overridden: *mut c_uint);
    pub fn clang_disposeOverriddenCursors(overridden: *mut CXCursor);
    pub fn clang_getIncludedFile(cursor: CXCursor) -> CXFile;
    pub fn clang_getCursor(arg1: CXTranslationUnit, arg2: CXSourceLocation) ->
     CXCursor;
    pub fn clang_getCursorLocation(arg1: CXCursor) -> CXSourceLocation;
    pub fn clang_getCursorExtent(arg1: CXCursor) -> CXSourceRange;
    pub fn clang_getCursorType(C: CXCursor) -> CXType;
    pub fn clang_getTypeSpelling(CT: CXType) -> CXString;
    pub fn clang_getTypedefDeclUnderlyingType(C: CXCursor) -> CXType;
    pub fn clang_getEnumDeclIntegerType(C: CXCursor) -> CXType;
    pub fn clang_getEnumConstantDeclValue(C: CXCursor) -> c_longlong;
    pub fn clang_getEnumConstantDeclUnsignedValue(C: CXCursor) -> c_ulonglong;
    pub fn clang_getFieldDeclBitWidth(C: CXCursor) -> c_int;
    pub fn clang_Cursor_getNumArguments(C: CXCursor) -> c_int;
    pub fn clang_Cursor_getArgument(C: CXCursor, i: c_uint) -> CXCursor;
    pub fn clang_equalTypes(A: CXType, B: CXType) -> c_uint;
    pub fn clang_getCanonicalType(T: CXType) -> CXType;
    pub fn clang_isConstQualifiedType(T: CXType) -> c_uint;
    pub fn clang_isVolatileQualifiedType(T: CXType) -> c_uint;
    pub fn clang_isRestrictQualifiedType(T: CXType) -> c_uint;
    pub fn clang_getPointeeType(T: CXType) -> CXType;
    pub fn clang_getTypeDeclaration(T: CXType) -> CXCursor;
    pub fn clang_getDeclObjCTypeEncoding(C: CXCursor) -> CXString;
    pub fn clang_getTypeKindSpelling(K: Enum_CXTypeKind) -> CXString;
    pub fn clang_getFunctionTypeCallingConv(T: CXType) -> Enum_CXCallingConv;
    pub fn clang_getResultType(T: CXType) -> CXType;
    pub fn clang_getNumArgTypes(T: CXType) -> c_int;
    pub fn clang_getArgType(T: CXType, i: c_uint) -> CXType;
    pub fn clang_isFunctionTypeVariadic(T: CXType) -> c_uint;
    pub fn clang_getCursorResultType(C: CXCursor) -> CXType;
    pub fn clang_isPODType(T: CXType) -> c_uint;
    pub fn clang_getElementType(T: CXType) -> CXType;
    pub fn clang_getNumElements(T: CXType) -> c_longlong;
    pub fn clang_getArrayElementType(T: CXType) -> CXType;
    pub fn clang_getArraySize(T: CXType) -> c_longlong;
    pub fn clang_Type_getAlignOf(T: CXType) -> c_longlong;
    pub fn clang_Type_getSizeOf(T: CXType) -> c_longlong;
    pub fn clang_Type_getOffsetOf(T: CXType, S: *c_schar) -> c_longlong;
    pub fn clang_Cursor_isBitField(C: CXCursor) -> c_uint;
    pub fn clang_isVirtualBase(arg1: CXCursor) -> c_uint;
    pub fn clang_getCXXAccessSpecifier(arg1: CXCursor) ->
     Enum_CX_CXXAccessSpecifier;
    pub fn clang_getNumOverloadedDecls(cursor: CXCursor) -> c_uint;
    pub fn clang_getOverloadedDecl(cursor: CXCursor, index: c_uint) ->
     CXCursor;
    pub fn clang_getIBOutletCollectionType(arg1: CXCursor) -> CXType;
    pub fn clang_visitChildren(parent: CXCursor, visitor: CXCursorVisitor,
                               client_data: CXClientData) -> c_uint;
    pub fn clang_getCursorUSR(arg1: CXCursor) -> CXString;
    pub fn clang_constructUSR_ObjCClass(class_name: *c_schar) -> CXString;
    pub fn clang_constructUSR_ObjCCategory(class_name: *c_schar,
                                           category_name: *c_schar) ->
     CXString;
    pub fn clang_constructUSR_ObjCProtocol(protocol_name: *c_schar) ->
     CXString;
    pub fn clang_constructUSR_ObjCIvar(name: *c_schar, classUSR: CXString) ->
     CXString;
    pub fn clang_constructUSR_ObjCMethod(name: *c_schar,
                                         isInstanceMethod: c_uint,
                                         classUSR: CXString) -> CXString;
    pub fn clang_constructUSR_ObjCProperty(property: *c_schar,
                                           classUSR: CXString) -> CXString;
    pub fn clang_getCursorSpelling(arg1: CXCursor) -> CXString;
    pub fn clang_Cursor_getSpellingNameRange(arg1: CXCursor,
                                             pieceIndex: c_uint,
                                             options: c_uint) ->
     CXSourceRange;
    pub fn clang_getCursorDisplayName(arg1: CXCursor) -> CXString;
    pub fn clang_getCursorReferenced(arg1: CXCursor) -> CXCursor;
    pub fn clang_getCursorDefinition(arg1: CXCursor) -> CXCursor;
    pub fn clang_isCursorDefinition(arg1: CXCursor) -> c_uint;
    pub fn clang_getCanonicalCursor(arg1: CXCursor) -> CXCursor;
    pub fn clang_Cursor_getObjCSelectorIndex(arg1: CXCursor) -> c_int;
    pub fn clang_Cursor_isDynamicCall(C: CXCursor) -> c_int;
    pub fn clang_Cursor_getReceiverType(C: CXCursor) -> CXType;
    pub fn clang_Cursor_getObjCPropertyAttributes(C: CXCursor,
                                                  reserved: c_uint) -> c_uint;
    pub fn clang_Cursor_getObjCDeclQualifiers(C: CXCursor) -> c_uint;
    pub fn clang_Cursor_isVariadic(C: CXCursor) -> c_uint;
    pub fn clang_Cursor_getCommentRange(C: CXCursor) -> CXSourceRange;
    pub fn clang_Cursor_getRawCommentText(C: CXCursor) -> CXString;
    pub fn clang_Cursor_getBriefCommentText(C: CXCursor) -> CXString;
    pub fn clang_Cursor_getParsedComment(C: CXCursor) -> CXComment;
    pub fn clang_Cursor_getModule(C: CXCursor) -> CXModule;
    pub fn clang_Module_getASTFile(Module: CXModule) -> CXFile;
    pub fn clang_Module_getParent(Module: CXModule) -> CXModule;
    pub fn clang_Module_getName(Module: CXModule) -> CXString;
    pub fn clang_Module_getFullName(Module: CXModule) -> CXString;
    pub fn clang_Module_getNumTopLevelHeaders(arg1: CXTranslationUnit,
                                              Module: CXModule) -> c_uint;
    pub fn clang_Module_getTopLevelHeader(arg1: CXTranslationUnit,
                                          Module: CXModule, Index: c_uint) ->
     CXFile;
    pub fn clang_Comment_getKind(Comment: CXComment) -> Enum_CXCommentKind;
    pub fn clang_Comment_getNumChildren(Comment: CXComment) -> c_uint;
    pub fn clang_Comment_getChild(Comment: CXComment, ChildIdx: c_uint) ->
     CXComment;
    pub fn clang_Comment_isWhitespace(Comment: CXComment) -> c_uint;
    pub fn clang_InlineContentComment_hasTrailingNewline(Comment: CXComment)
     -> c_uint;
    pub fn clang_TextComment_getText(Comment: CXComment) -> CXString;
    pub fn clang_InlineCommandComment_getCommandName(Comment: CXComment) ->
     CXString;
    pub fn clang_InlineCommandComment_getRenderKind(Comment: CXComment) ->
     Enum_CXCommentInlineCommandRenderKind;
    pub fn clang_InlineCommandComment_getNumArgs(Comment: CXComment) ->
     c_uint;
    pub fn clang_InlineCommandComment_getArgText(Comment: CXComment,
                                                 ArgIdx: c_uint) -> CXString;
    pub fn clang_HTMLTagComment_getTagName(Comment: CXComment) -> CXString;
    pub fn clang_HTMLStartTagComment_isSelfClosing(Comment: CXComment) ->
     c_uint;
    pub fn clang_HTMLStartTag_getNumAttrs(Comment: CXComment) -> c_uint;
    pub fn clang_HTMLStartTag_getAttrName(Comment: CXComment, AttrIdx: c_uint)
     -> CXString;
    pub fn clang_HTMLStartTag_getAttrValue(Comment: CXComment,
                                           AttrIdx: c_uint) -> CXString;
    pub fn clang_BlockCommandComment_getCommandName(Comment: CXComment) ->
     CXString;
    pub fn clang_BlockCommandComment_getNumArgs(Comment: CXComment) -> c_uint;
    pub fn clang_BlockCommandComment_getArgText(Comment: CXComment,
                                                ArgIdx: c_uint) -> CXString;
    pub fn clang_BlockCommandComment_getParagraph(Comment: CXComment) ->
     CXComment;
    pub fn clang_ParamCommandComment_getParamName(Comment: CXComment) ->
     CXString;
    pub fn clang_ParamCommandComment_isParamIndexValid(Comment: CXComment) ->
     c_uint;
    pub fn clang_ParamCommandComment_getParamIndex(Comment: CXComment) ->
     c_uint;
    pub fn clang_ParamCommandComment_isDirectionExplicit(Comment: CXComment)
     -> c_uint;
    pub fn clang_ParamCommandComment_getDirection(Comment: CXComment) ->
     Enum_CXCommentParamPassDirection;
    pub fn clang_TParamCommandComment_getParamName(Comment: CXComment) ->
     CXString;
    pub fn clang_TParamCommandComment_isParamPositionValid(Comment: CXComment)
     -> c_uint;
    pub fn clang_TParamCommandComment_getDepth(Comment: CXComment) -> c_uint;
    pub fn clang_TParamCommandComment_getIndex(Comment: CXComment,
                                               Depth: c_uint) -> c_uint;
    pub fn clang_VerbatimBlockLineComment_getText(Comment: CXComment) ->
     CXString;
    pub fn clang_VerbatimLineComment_getText(Comment: CXComment) -> CXString;
    pub fn clang_HTMLTagComment_getAsString(Comment: CXComment) -> CXString;
    pub fn clang_FullComment_getAsHTML(Comment: CXComment) -> CXString;
    pub fn clang_FullComment_getAsXML(Comment: CXComment) -> CXString;
    pub fn clang_CXXMethod_isStatic(C: CXCursor) -> c_uint;
    pub fn clang_CXXMethod_isVirtual(C: CXCursor) -> c_uint;
    pub fn clang_getTemplateCursorKind(C: CXCursor) -> Enum_CXCursorKind;
    pub fn clang_getSpecializedCursorTemplate(C: CXCursor) -> CXCursor;
    pub fn clang_getCursorReferenceNameRange(C: CXCursor, NameFlags: c_uint,
                                             PieceIndex: c_uint) ->
     CXSourceRange;
    pub fn clang_getTokenKind(arg1: CXToken) -> CXTokenKind;
    pub fn clang_getTokenSpelling(arg1: CXTranslationUnit, arg2: CXToken) ->
     CXString;
    pub fn clang_getTokenLocation(arg1: CXTranslationUnit, arg2: CXToken) ->
     CXSourceLocation;
    pub fn clang_getTokenExtent(arg1: CXTranslationUnit, arg2: CXToken) ->
     CXSourceRange;
    pub fn clang_tokenize(TU: CXTranslationUnit, Range: CXSourceRange,
                          Tokens: *mut *mut CXToken, NumTokens: *mut c_uint);
    pub fn clang_annotateTokens(TU: CXTranslationUnit, Tokens: *mut CXToken,
                                NumTokens: c_uint, Cursors: *mut CXCursor);
    pub fn clang_disposeTokens(TU: CXTranslationUnit, Tokens: *mut CXToken,
                               NumTokens: c_uint);
    pub fn clang_getCursorKindSpelling(Kind: Enum_CXCursorKind) -> CXString;
    pub fn clang_getDefinitionSpellingAndExtent(arg1: CXCursor,
                                                startBuf: *mut *c_schar,
                                                endBuf: *mut *c_schar,
                                                startLine: *mut c_uint,
                                                startColumn: *mut c_uint,
                                                endLine: *mut c_uint,
                                                endColumn: *mut c_uint);
    pub fn clang_enableStackTraces();
    pub fn clang_executeOnThread(_fn: extern "C" fn(arg1: *mut c_void),
                                 user_data: *mut c_void, stack_size: c_uint);
    pub fn clang_getCompletionChunkKind(completion_string: CXCompletionString,
                                        chunk_number: c_uint) ->
     Enum_CXCompletionChunkKind;
    pub fn clang_getCompletionChunkText(completion_string: CXCompletionString,
                                        chunk_number: c_uint) -> CXString;
    pub fn clang_getCompletionChunkCompletionString(completion_string:
                                                        CXCompletionString,
                                                    chunk_number: c_uint) ->
     CXCompletionString;
    pub fn clang_getNumCompletionChunks(completion_string: CXCompletionString)
     -> c_uint;
    pub fn clang_getCompletionPriority(completion_string: CXCompletionString)
     -> c_uint;
    pub fn clang_getCompletionAvailability(completion_string:
                                               CXCompletionString) ->
     Enum_CXAvailabilityKind;
    pub fn clang_getCompletionNumAnnotations(completion_string:
                                                 CXCompletionString) ->
     c_uint;
    pub fn clang_getCompletionAnnotation(completion_string:
                                             CXCompletionString,
                                         annotation_number: c_uint) ->
     CXString;
    pub fn clang_getCompletionParent(completion_string: CXCompletionString,
                                     kind: *mut Enum_CXCursorKind) ->
     CXString;
    pub fn clang_getCompletionBriefComment(completion_string:
                                               CXCompletionString) ->
     CXString;
    pub fn clang_getCursorCompletionString(cursor: CXCursor) ->
     CXCompletionString;
    pub fn clang_defaultCodeCompleteOptions() -> c_uint;
    pub fn clang_codeCompleteAt(TU: CXTranslationUnit,
                                complete_filename: *c_schar,
                                complete_line: c_uint,
                                complete_column: c_uint,
                                unsaved_files: *mut Struct_CXUnsavedFile,
                                num_unsaved_files: c_uint, options: c_uint) ->
     *mut CXCodeCompleteResults;
    pub fn clang_sortCodeCompletionResults(Results: *mut CXCompletionResult,
                                           NumResults: c_uint);
    pub fn clang_disposeCodeCompleteResults(Results:
                                                *mut CXCodeCompleteResults);
    pub fn clang_codeCompleteGetNumDiagnostics(Results:
                                                   *mut CXCodeCompleteResults)
     -> c_uint;
    pub fn clang_codeCompleteGetDiagnostic(Results:
                                               *mut CXCodeCompleteResults,
                                           Index: c_uint) -> CXDiagnostic;
    pub fn clang_codeCompleteGetContexts(Results: *mut CXCodeCompleteResults)
     -> c_ulonglong;
    pub fn clang_codeCompleteGetContainerKind(Results:
                                                  *mut CXCodeCompleteResults,
                                              IsIncomplete: *mut c_uint) ->
     Enum_CXCursorKind;
    pub fn clang_codeCompleteGetContainerUSR(Results:
                                                 *mut CXCodeCompleteResults)
     -> CXString;
    pub fn clang_codeCompleteGetObjCSelector(Results:
                                                 *mut CXCodeCompleteResults)
     -> CXString;
    pub fn clang_getClangVersion() -> CXString;
    pub fn clang_toggleCrashRecovery(isEnabled: c_uint);
    pub fn clang_getInclusions(tu: CXTranslationUnit,
                               visitor: CXInclusionVisitor,
                               client_data: CXClientData);
    pub fn clang_getRemappings(path: *c_schar) -> CXRemapping;
    pub fn clang_getRemappingsFromFileList(filePaths: *mut *c_schar,
                                           numFiles: c_uint) -> CXRemapping;
    pub fn clang_remap_getNumFiles(arg1: CXRemapping) -> c_uint;
    pub fn clang_remap_getFilenames(arg1: CXRemapping, index: c_uint,
                                    original: *mut CXString,
                                    transformed: *mut CXString);
    pub fn clang_remap_dispose(arg1: CXRemapping);
    pub fn clang_findReferencesInFile(cursor: CXCursor, file: CXFile,
                                      visitor: CXCursorAndRangeVisitor) ->
     CXResult;
    pub fn clang_findIncludesInFile(TU: CXTranslationUnit, file: CXFile,
                                    visitor: CXCursorAndRangeVisitor) ->
     CXResult;
    pub fn clang_index_isEntityObjCContainerKind(arg1: CXIdxEntityKind) ->
     c_int;
    pub fn clang_index_getObjCContainerDeclInfo(arg1: *CXIdxDeclInfo) ->
     *CXIdxObjCContainerDeclInfo;
    pub fn clang_index_getObjCInterfaceDeclInfo(arg1: *CXIdxDeclInfo) ->
     *CXIdxObjCInterfaceDeclInfo;
    pub fn clang_index_getObjCCategoryDeclInfo(arg1: *CXIdxDeclInfo) ->
     *CXIdxObjCCategoryDeclInfo;
    pub fn clang_index_getObjCProtocolRefListInfo(arg1: *CXIdxDeclInfo) ->
     *CXIdxObjCProtocolRefListInfo;
    pub fn clang_index_getObjCPropertyDeclInfo(arg1: *CXIdxDeclInfo) ->
     *CXIdxObjCPropertyDeclInfo;
    pub fn clang_index_getIBOutletCollectionAttrInfo(arg1: *CXIdxAttrInfo) ->
     *CXIdxIBOutletCollectionAttrInfo;
    pub fn clang_index_getCXXClassDeclInfo(arg1: *CXIdxDeclInfo) ->
     *CXIdxCXXClassDeclInfo;
    pub fn clang_index_getClientContainer(arg1: *CXIdxContainerInfo) ->
     CXIdxClientContainer;
    pub fn clang_index_setClientContainer(arg1: *CXIdxContainerInfo,
                                          arg2: CXIdxClientContainer);
    pub fn clang_index_getClientEntity(arg1: *CXIdxEntityInfo) ->
     CXIdxClientEntity;
    pub fn clang_index_setClientEntity(arg1: *CXIdxEntityInfo,
                                       arg2: CXIdxClientEntity);
    pub fn clang_IndexAction_create(CIdx: CXIndex) -> CXIndexAction;
    pub fn clang_IndexAction_dispose(arg1: CXIndexAction);
    pub fn clang_indexSourceFile(arg1: CXIndexAction,
                                 client_data: CXClientData,
                                 index_callbacks: *mut IndexerCallbacks,
                                 index_callbacks_size: c_uint,
                                 index_options: c_uint,
                                 source_filename: *c_schar,
                                 command_line_args: **c_schar,
                                 num_command_line_args: c_int,
                                 unsaved_files: *mut Struct_CXUnsavedFile,
                                 num_unsaved_files: c_uint,
                                 out_TU: *mut CXTranslationUnit,
                                 TU_options: c_uint) -> c_int;
    pub fn clang_indexTranslationUnit(arg1: CXIndexAction,
                                      client_data: CXClientData,
                                      index_callbacks: *mut IndexerCallbacks,
                                      index_callbacks_size: c_uint,
                                      index_options: c_uint,
                                      arg2: CXTranslationUnit) -> c_int;
    pub fn clang_indexLoc_getFileLocation(loc: CXIdxLoc,
                                          indexFile: *mut CXIdxClientFile,
                                          file: *mut CXFile,
                                          line: *mut c_uint,
                                          column: *mut c_uint,
                                          offset: *mut c_uint);
    pub fn clang_indexLoc_getCXSourceLocation(loc: CXIdxLoc) ->
     CXSourceLocation;
}

/* automatically generated by rust-bindgen */


#![feature(const_fn)]
#![allow(non_snake_case)]


pub type AnotherInt = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct C {
    pub c: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_int,
    pub arr: [::std::os::raw::c_int; 10usize],
    pub d: AnotherInt,
    pub other_ptr: *mut AnotherInt,
}
impl ::std::clone::Clone for C {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_C() {
    assert_eq!(::std::mem::size_of::<C>() , 72usize);
    assert_eq!(::std::mem::align_of::<C>() , 8usize);
}
extern "C" {
    fn _ZN1C6methodEi(this: *mut C, c: ::std::os::raw::c_int);
    fn _ZN1C9methodRefERi(this: *mut C, c: *mut ::std::os::raw::c_int);
    fn _ZN1C16complexMethodRefERPKc(this: *mut C,
                                    c: *mut *const ::std::os::raw::c_char);
    fn _ZN1C13anotherMethodEi(this: *mut C, c: AnotherInt);
}
impl C {
    #[inline]
    pub unsafe fn method(&mut self, c: ::std::os::raw::c_int) {
        _ZN1C6methodEi(&mut *self, c)
    }
    #[inline]
    pub unsafe fn methodRef(&mut self, c: *mut ::std::os::raw::c_int) {
        _ZN1C9methodRefERi(&mut *self, c)
    }
    #[inline]
    pub unsafe fn complexMethodRef(&mut self,
                                   c: *mut *const ::std::os::raw::c_char) {
        _ZN1C16complexMethodRefERPKc(&mut *self, c)
    }
    #[inline]
    pub unsafe fn anotherMethod(&mut self, c: AnotherInt) {
        _ZN1C13anotherMethodEi(&mut *self, c)
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct D {
    pub _base: C,
    pub ptr: *mut ::std::os::raw::c_int,
}
impl ::std::clone::Clone for D {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_D() {
    assert_eq!(::std::mem::size_of::<D>() , 80usize);
    assert_eq!(::std::mem::align_of::<D>() , 8usize);
}

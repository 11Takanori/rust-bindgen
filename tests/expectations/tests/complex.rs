/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


#[repr(C)]
#[derive(Debug, Copy)]
pub struct Testdouble {
    pub mMember: [f64; 2usize],
}
#[test]
fn bindgen_test_layout_Testdouble() {
    assert_eq!(::std::mem::size_of::<Testdouble>() , 16usize);
    assert_eq!(::std::mem::align_of::<Testdouble>() , 8usize);
}
impl Clone for Testdouble {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TestdoublePtr {
    pub mMember: *mut [f64; 2usize],
}
#[test]
fn bindgen_test_layout_TestdoublePtr() {
    assert_eq!(::std::mem::size_of::<TestdoublePtr>() , 8usize);
    assert_eq!(::std::mem::align_of::<TestdoublePtr>() , 8usize);
}
impl Clone for TestdoublePtr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Testfloat {
    pub mMember: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_Testfloat() {
    assert_eq!(::std::mem::size_of::<Testfloat>() , 8usize);
    assert_eq!(::std::mem::align_of::<Testfloat>() , 4usize);
}
impl Clone for Testfloat {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TestfloatPtr {
    pub mMember: *mut [f32; 2usize],
}
#[test]
fn bindgen_test_layout_TestfloatPtr() {
    assert_eq!(::std::mem::size_of::<TestfloatPtr>() , 8usize);
    assert_eq!(::std::mem::align_of::<TestfloatPtr>() , 8usize);
}
impl Clone for TestfloatPtr {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Testint {
    pub mMember: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_Testint() {
    assert_eq!(::std::mem::size_of::<Testint>() , 8usize);
    assert_eq!(::std::mem::align_of::<Testint>() , 4usize);
}
impl Clone for Testint {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TestintPtr {
    pub mMember: *mut [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_TestintPtr() {
    assert_eq!(::std::mem::size_of::<TestintPtr>() , 8usize);
    assert_eq!(::std::mem::align_of::<TestintPtr>() , 8usize);
}
impl Clone for TestintPtr {
    fn clone(&self) -> Self { *self }
}

/* automatically generated by rust-bindgen */

#![feature(const_fn)]

#[derive(Copy, Debug)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_C {
    pub a: ::std::os::raw::c_int,
    pub big_array: [::std::os::raw::c_char; 33usize],
}
impl ::std::clone::Clone for Struct_C {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Struct_C() {
    assert_eq!(::std::mem::size_of::<Struct_C>() , 40usize);
    assert_eq!(::std::mem::align_of::<Struct_C>() , 4usize);
}
#[repr(C)]
#[derive(Debug)]
pub struct Struct_WithDtor {
    pub b: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Struct_WithDtor() {
    assert_eq!(::std::mem::size_of::<Struct_WithDtor>() , 4usize);
    assert_eq!(::std::mem::align_of::<Struct_WithDtor>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Union_Union {
    pub d: __BindgenUnionField<f32>,
    pub i: __BindgenUnionField<::std::os::raw::c_int>,
    pub _bindgen_data_: u32,
}
impl Union_Union {
    pub unsafe fn d(&mut self) -> *mut f32 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Union {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Union_Union() {
    assert_eq!(::std::mem::size_of::<Union_Union>() , 4usize);
    assert_eq!(::std::mem::align_of::<Union_Union>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Struct_WithUnion {
    pub data: Union_Union,
}
impl ::std::clone::Clone for Struct_WithUnion {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Struct_WithUnion() {
    assert_eq!(::std::mem::size_of::<Struct_WithUnion>() , 4usize);
    assert_eq!(::std::mem::align_of::<Struct_WithUnion>() , 4usize);
}

/* automatically generated by rust-bindgen */


#![feature(const_fn)]
#![allow(non_snake_case)]


#[repr(C)]
#[derive(Debug, Copy)]
pub struct Struct_C {
    pub m_member: ::std::os::raw::c_int,
    pub m_other: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_C {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Struct_C() {
    assert_eq!(::std::mem::size_of::<Struct_C>() , 8usize);
    assert_eq!(::std::mem::align_of::<Struct_C>() , 4usize);
}
#[repr(C)]
#[derive(Debug)]
pub struct Struct_NonCopiable {
    pub m_member: ::std::cell::Cell<::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_Struct_NonCopiable() {
    assert_eq!(::std::mem::size_of::<Struct_NonCopiable>() , 4usize);
    assert_eq!(::std::mem::align_of::<Struct_NonCopiable>() , 4usize);
}
#[repr(C)]
#[derive(Debug)]
pub struct Struct_NonCopiableWithNonCopiableMutableMember {
    pub m_member: ::std::cell::UnsafeCell<Struct_NonCopiable>,
}
#[test]
fn bindgen_test_layout_Struct_NonCopiableWithNonCopiableMutableMember() {
    assert_eq!(::std::mem::size_of::<Struct_NonCopiableWithNonCopiableMutableMember>()
               , 4usize);
    assert_eq!(::std::mem::align_of::<Struct_NonCopiableWithNonCopiableMutableMember>()
               , 4usize);
}

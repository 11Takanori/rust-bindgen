/* automatically generated by rust-bindgen */


#![feature(const_fn)]
#![allow(non_snake_case)]


#[repr(C)]
#[derive(Debug, Copy)]
pub struct Struct_A {
    pub member_a: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Struct_A_B {
    pub member_b: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_A_B {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Struct_A_B() {
    assert_eq!(::std::mem::size_of::<Struct_A_B>() , 4usize);
    assert_eq!(::std::mem::align_of::<Struct_A_B>() , 4usize);
}
impl ::std::clone::Clone for Struct_A {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Struct_A() {
    assert_eq!(::std::mem::size_of::<Struct_A>() , 4usize);
    assert_eq!(::std::mem::align_of::<Struct_A>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Struct_D {
    pub member: Struct_A_B,
}
impl ::std::clone::Clone for Struct_D {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Struct_D() {
    assert_eq!(::std::mem::size_of::<Struct_D>() , 4usize);
    assert_eq!(::std::mem::align_of::<Struct_D>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct_Templated<T> {
    pub member: T,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct_Templated_Templated_inner<T> {
    pub member_ptr: *mut T,
}
extern "C" {
    pub static mut var: Struct_A_B;
}

/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


#[derive(Copy, Debug)]
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Union_pixel {
    pub rgba: __BindgenUnionField<::std::os::raw::c_uint>,
    pub pixel_union_with_anon_unnamed_struct_h_unnamed_1: __BindgenUnionField<Struct_pixel_union_with_anon_unnamed_struct_h_unnamed_1>,
    pub _bindgen_data_: u32,
}
impl Union_pixel {
    pub unsafe fn rgba(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pixel_union_with_anon_unnamed_struct_h_unnamed_1(&mut self)
     -> *mut Struct_pixel_union_with_anon_unnamed_struct_h_unnamed_1 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_pixel {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Union_pixel() {
    assert_eq!(::std::mem::size_of::<Union_pixel>() , 4usize);
    assert_eq!(::std::mem::align_of::<Union_pixel>() , 4usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Struct_pixel_union_with_anon_unnamed_struct_h_unnamed_1 {
    pub r: ::std::os::raw::c_uchar,
    pub g: ::std::os::raw::c_uchar,
    pub b: ::std::os::raw::c_uchar,
    pub a: ::std::os::raw::c_uchar,
}
impl ::std::clone::Clone for
 Struct_pixel_union_with_anon_unnamed_struct_h_unnamed_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Struct_pixel_union_with_anon_unnamed_struct_h_unnamed_1() {
    assert_eq!(::std::mem::size_of::<Struct_pixel_union_with_anon_unnamed_struct_h_unnamed_1>()
               , 4usize);
    assert_eq!(::std::mem::align_of::<Struct_pixel_union_with_anon_unnamed_struct_h_unnamed_1>()
               , 1usize);
}

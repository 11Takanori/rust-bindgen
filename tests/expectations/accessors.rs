/* automatically generated by rust-bindgen */


#![allow(non_snake_case)]


#[repr(C)]
#[derive(Debug, Copy)]
pub struct Struct_SomeAccessors {
    pub mNoAccessor: ::std::os::raw::c_int,
    /** <div rustbindgen accessor></div> */
    pub mBothAccessors: ::std::os::raw::c_int,
    /** <div rustbindgen accessor="unsafe"></div> */
    pub mUnsafeAccessors: ::std::os::raw::c_int,
    /** <div rustbindgen accessor="immutable"></div> */
    pub mImmutableAccessor: ::std::os::raw::c_int,
}
impl Struct_SomeAccessors {
    #[inline]
    pub fn get_mBothAccessors(&self) -> &::std::os::raw::c_int {
        &self.mBothAccessors
    }
    pub fn get_mBothAccessors_mut(&mut self) -> &mut ::std::os::raw::c_int {
        &mut self.mBothAccessors
    }
    #[inline]
    pub unsafe fn get_mUnsafeAccessors(&self) -> &::std::os::raw::c_int {
        &self.mUnsafeAccessors
    }
    pub unsafe fn get_mUnsafeAccessors_mut(&mut self)
     -> &mut ::std::os::raw::c_int {
        &mut self.mUnsafeAccessors
    }
    #[inline]
    pub fn get_mImmutableAccessor(&self) -> &::std::os::raw::c_int {
        &self.mImmutableAccessor
    }
}
impl ::std::clone::Clone for Struct_SomeAccessors {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Struct_SomeAccessors() {
    assert_eq!(::std::mem::size_of::<Struct_SomeAccessors>() , 16usize);
    assert_eq!(::std::mem::align_of::<Struct_SomeAccessors>() , 4usize);
}
/** <div rustbindgen accessor></div> */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Struct_AllAccessors {
    pub mBothAccessors: ::std::os::raw::c_int,
    pub mAlsoBothAccessors: ::std::os::raw::c_int,
}
impl Struct_AllAccessors {
    #[inline]
    pub fn get_mBothAccessors(&self) -> &::std::os::raw::c_int {
        &self.mBothAccessors
    }
    pub fn get_mBothAccessors_mut(&mut self) -> &mut ::std::os::raw::c_int {
        &mut self.mBothAccessors
    }
    #[inline]
    pub fn get_mAlsoBothAccessors(&self) -> &::std::os::raw::c_int {
        &self.mAlsoBothAccessors
    }
    pub fn get_mAlsoBothAccessors_mut(&mut self)
     -> &mut ::std::os::raw::c_int {
        &mut self.mAlsoBothAccessors
    }
}
impl ::std::clone::Clone for Struct_AllAccessors {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Struct_AllAccessors() {
    assert_eq!(::std::mem::size_of::<Struct_AllAccessors>() , 8usize);
    assert_eq!(::std::mem::align_of::<Struct_AllAccessors>() , 4usize);
}
/** <div rustbindgen accessor="unsafe"></div> */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Struct_AllUnsafeAccessors {
    pub mBothAccessors: ::std::os::raw::c_int,
    pub mAlsoBothAccessors: ::std::os::raw::c_int,
}
impl Struct_AllUnsafeAccessors {
    #[inline]
    pub unsafe fn get_mBothAccessors(&self) -> &::std::os::raw::c_int {
        &self.mBothAccessors
    }
    pub unsafe fn get_mBothAccessors_mut(&mut self)
     -> &mut ::std::os::raw::c_int {
        &mut self.mBothAccessors
    }
    #[inline]
    pub unsafe fn get_mAlsoBothAccessors(&self) -> &::std::os::raw::c_int {
        &self.mAlsoBothAccessors
    }
    pub unsafe fn get_mAlsoBothAccessors_mut(&mut self)
     -> &mut ::std::os::raw::c_int {
        &mut self.mAlsoBothAccessors
    }
}
impl ::std::clone::Clone for Struct_AllUnsafeAccessors {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Struct_AllUnsafeAccessors() {
    assert_eq!(::std::mem::size_of::<Struct_AllUnsafeAccessors>() , 8usize);
    assert_eq!(::std::mem::align_of::<Struct_AllUnsafeAccessors>() , 4usize);
}
/** <div rustbindgen accessor></div> */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Struct_ContradictAccessors {
    pub mBothAccessors: ::std::os::raw::c_int,
    /** <div rustbindgen accessor="false"></div> */
    pub mNoAccessors: ::std::os::raw::c_int,
    /** <div rustbindgen accessor="unsafe"></div> */
    pub mUnsafeAccessors: ::std::os::raw::c_int,
    /** <div rustbindgen accessor="immutable"></div> */
    pub mImmutableAccessor: ::std::os::raw::c_int,
}
impl Struct_ContradictAccessors {
    #[inline]
    pub fn get_mBothAccessors(&self) -> &::std::os::raw::c_int {
        &self.mBothAccessors
    }
    pub fn get_mBothAccessors_mut(&mut self) -> &mut ::std::os::raw::c_int {
        &mut self.mBothAccessors
    }
    #[inline]
    pub unsafe fn get_mUnsafeAccessors(&self) -> &::std::os::raw::c_int {
        &self.mUnsafeAccessors
    }
    pub unsafe fn get_mUnsafeAccessors_mut(&mut self)
     -> &mut ::std::os::raw::c_int {
        &mut self.mUnsafeAccessors
    }
    #[inline]
    pub fn get_mImmutableAccessor(&self) -> &::std::os::raw::c_int {
        &self.mImmutableAccessor
    }
}
impl ::std::clone::Clone for Struct_ContradictAccessors {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Struct_ContradictAccessors() {
    assert_eq!(::std::mem::size_of::<Struct_ContradictAccessors>() , 16usize);
    assert_eq!(::std::mem::align_of::<Struct_ContradictAccessors>() , 4usize);
}
/** <div rustbindgen accessor replaces="Replaced"></div> */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Struct_Replaced {
    pub mAccessor: ::std::os::raw::c_int,
}
impl Struct_Replaced {
    #[inline]
    pub fn get_mAccessor(&self) -> &::std::os::raw::c_int { &self.mAccessor }
    pub fn get_mAccessor_mut(&mut self) -> &mut ::std::os::raw::c_int {
        &mut self.mAccessor
    }
}
impl ::std::clone::Clone for Struct_Replaced {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Struct_Replaced() {
    assert_eq!(::std::mem::size_of::<Struct_Replaced>() , 4usize);
    assert_eq!(::std::mem::align_of::<Struct_Replaced>() , 4usize);
}
/** <div rustbindgen accessor></div> */
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Struct_Wrapper {
    pub mReplaced: Struct_Replaced,
}
impl Struct_Wrapper {
    #[inline]
    pub fn get_mReplaced(&self) -> &Struct_Replaced { &self.mReplaced }
    pub fn get_mReplaced_mut(&mut self) -> &mut Struct_Replaced {
        &mut self.mReplaced
    }
}
impl ::std::clone::Clone for Struct_Wrapper {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Struct_Wrapper() {
    assert_eq!(::std::mem::size_of::<Struct_Wrapper>() , 4usize);
    assert_eq!(::std::mem::align_of::<Struct_Wrapper>() , 4usize);
}

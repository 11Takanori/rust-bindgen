/* automatically generated by rust-bindgen */

#![feature(const_fn)]

#[derive(Copy, Debug)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_WithBigArray {
    pub a: __BindgenUnionField<::std::os::raw::c_int>,
    pub b: __BindgenUnionField<[::std::os::raw::c_int; 33usize]>,
    pub _bindgen_data_: [u32; 33usize],
}
impl Union_WithBigArray {
    pub unsafe fn a(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn b(&mut self) -> *mut [::std::os::raw::c_int; 33usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_WithBigArray {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Union_WithBigArray() {
    assert_eq!(::std::mem::size_of::<Union_WithBigArray>() , 132usize);
    assert_eq!(::std::mem::align_of::<Union_WithBigArray>() , 4usize);
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_WithBigMember {
    pub a: __BindgenUnionField<::std::os::raw::c_int>,
    pub b: __BindgenUnionField<Union_WithBigArray>,
    pub _bindgen_data_: [u32; 33usize],
}
impl Union_WithBigMember {
    pub unsafe fn a(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn b(&mut self) -> *mut Union_WithBigArray {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_WithBigMember {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_Union_WithBigMember() {
    assert_eq!(::std::mem::size_of::<Union_WithBigMember>() , 132usize);
    assert_eq!(::std::mem::align_of::<Union_WithBigMember>() , 4usize);
}

/* automatically generated by rust-bindgen */

import libc::*;

type time_t = int;

type CXIndex = *c_void;

type struct_CXTranslationUnitImpl = c_void;

type CXTranslationUnit = *struct_CXTranslationUnitImpl;

type CXClientData = *c_void;

type struct_CXUnsavedFile = {
    Filename: *c_char,
    Contents: *c_char,
    Length: c_ulong,
};

type enum_CXAvailabilityKind = c_uint;
const CXAvailability_Available: u32 = 0_u32;
const CXAvailability_Deprecated: u32 = 1_u32;
const CXAvailability_NotAvailable: u32 = 2_u32;
const CXAvailability_NotAccessible: u32 = 3_u32;

type CXString = {
    data: *c_void,
    private_flags: c_uint,
};


type CXGlobalOptFlags = c_uint;
const CXGlobalOpt_None: u32 = 0_u32;
const CXGlobalOpt_ThreadBackgroundPriorityForIndexing: u32 = 1_u32;
const CXGlobalOpt_ThreadBackgroundPriorityForEditing: u32 = 2_u32;
const CXGlobalOpt_ThreadBackgroundPriorityForAll: u32 = 3_u32;

type CXFile = *c_void;

type CXSourceLocation = {
    ptr_data: (*c_void,*c_void),
    int_data: c_uint,
};

type CXSourceRange = {
    ptr_data: (*c_void,*c_void),
    begin_int_data: c_uint,
    end_int_data: c_uint,
};

type enum_CXDiagnosticSeverity = c_uint;
const CXDiagnostic_Ignored: u32 = 0_u32;
const CXDiagnostic_Note: u32 = 1_u32;
const CXDiagnostic_Warning: u32 = 2_u32;
const CXDiagnostic_Error: u32 = 3_u32;
const CXDiagnostic_Fatal: u32 = 4_u32;

type CXDiagnostic = *c_void;

type CXDiagnosticSet = *c_void;

type enum_CXLoadDiag_Error = c_uint;
const CXLoadDiag_None: u32 = 0_u32;
const CXLoadDiag_Unknown: u32 = 1_u32;
const CXLoadDiag_CannotLoad: u32 = 2_u32;
const CXLoadDiag_InvalidFile: u32 = 3_u32;

type enum_CXDiagnosticDisplayOptions = c_uint;
const CXDiagnostic_DisplaySourceLocation: u32 = 1_u32;
const CXDiagnostic_DisplayColumn: u32 = 2_u32;
const CXDiagnostic_DisplaySourceRanges: u32 = 4_u32;
const CXDiagnostic_DisplayOption: u32 = 8_u32;
const CXDiagnostic_DisplayCategoryId: u32 = 16_u32;
const CXDiagnostic_DisplayCategoryName: u32 = 32_u32;

type enum_CXTranslationUnit_Flags = c_uint;
const CXTranslationUnit_None: u32 = 0_u32;
const CXTranslationUnit_DetailedPreprocessingRecord: u32 = 1_u32;
const CXTranslationUnit_Incomplete: u32 = 2_u32;
const CXTranslationUnit_PrecompiledPreamble: u32 = 4_u32;
const CXTranslationUnit_CacheCompletionResults: u32 = 8_u32;
const CXTranslationUnit_CXXPrecompiledPreamble: u32 = 16_u32;
const CXTranslationUnit_CXXChainedPCH: u32 = 32_u32;
const CXTranslationUnit_SkipFunctionBodies: u32 = 64_u32;

type enum_CXSaveTranslationUnit_Flags = c_uint;
const CXSaveTranslationUnit_None: u32 = 0_u32;

type enum_CXSaveError = c_uint;
const CXSaveError_None: u32 = 0_u32;
const CXSaveError_Unknown: u32 = 1_u32;
const CXSaveError_TranslationErrors: u32 = 2_u32;
const CXSaveError_InvalidTU: u32 = 3_u32;

type enum_CXReparse_Flags = c_uint;
const CXReparse_None: u32 = 0_u32;

type enum_CXTUResourceUsageKind = c_uint;
const CXTUResourceUsage_AST: u32 = 1_u32;
const CXTUResourceUsage_Identifiers: u32 = 2_u32;
const CXTUResourceUsage_Selectors: u32 = 3_u32;
const CXTUResourceUsage_GlobalCompletionResults: u32 = 4_u32;
const CXTUResourceUsage_SourceManagerContentCache: u32 = 5_u32;
const CXTUResourceUsage_AST_SideTables: u32 = 6_u32;
const CXTUResourceUsage_SourceManager_Membuffer_Malloc: u32 = 7_u32;
const CXTUResourceUsage_SourceManager_Membuffer_MMap: u32 = 8_u32;
const CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc: u32 = 9_u32;
const CXTUResourceUsage_ExternalASTSource_Membuffer_MMap: u32 = 10_u32;
const CXTUResourceUsage_Preprocessor: u32 = 11_u32;
const CXTUResourceUsage_PreprocessingRecord: u32 = 12_u32;
const CXTUResourceUsage_SourceManager_DataStructures: u32 = 13_u32;
const CXTUResourceUsage_Preprocessor_HeaderSearch: u32 = 14_u32;
const CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN: u32 = 1_u32;
const CXTUResourceUsage_MEMORY_IN_BYTES_END: u32 = 14_u32;
const CXTUResourceUsage_First: u32 = 1_u32;
const CXTUResourceUsage_Last: u32 = 14_u32;

type struct_CXTUResourceUsageEntry = {
    kind: enum_CXTUResourceUsageKind,
    amount: c_ulong,
};

type CXTUResourceUsageEntry = struct_CXTUResourceUsageEntry;

type struct_CXTUResourceUsage = {
    data: *c_void,
    numEntries: c_uint,
    entries: *CXTUResourceUsageEntry,
};

type CXTUResourceUsage = struct_CXTUResourceUsage;

type enum_CXCursorKind = c_uint;
const CXCursor_UnexposedDecl: u32 = 1_u32;
const CXCursor_StructDecl: u32 = 2_u32;
const CXCursor_UnionDecl: u32 = 3_u32;
const CXCursor_ClassDecl: u32 = 4_u32;
const CXCursor_EnumDecl: u32 = 5_u32;
const CXCursor_FieldDecl: u32 = 6_u32;
const CXCursor_EnumConstantDecl: u32 = 7_u32;
const CXCursor_FunctionDecl: u32 = 8_u32;
const CXCursor_VarDecl: u32 = 9_u32;
const CXCursor_ParmDecl: u32 = 10_u32;
const CXCursor_ObjCInterfaceDecl: u32 = 11_u32;
const CXCursor_ObjCCategoryDecl: u32 = 12_u32;
const CXCursor_ObjCProtocolDecl: u32 = 13_u32;
const CXCursor_ObjCPropertyDecl: u32 = 14_u32;
const CXCursor_ObjCIvarDecl: u32 = 15_u32;
const CXCursor_ObjCInstanceMethodDecl: u32 = 16_u32;
const CXCursor_ObjCClassMethodDecl: u32 = 17_u32;
const CXCursor_ObjCImplementationDecl: u32 = 18_u32;
const CXCursor_ObjCCategoryImplDecl: u32 = 19_u32;
const CXCursor_TypedefDecl: u32 = 20_u32;
const CXCursor_CXXMethod: u32 = 21_u32;
const CXCursor_Namespace: u32 = 22_u32;
const CXCursor_LinkageSpec: u32 = 23_u32;
const CXCursor_Constructor: u32 = 24_u32;
const CXCursor_Destructor: u32 = 25_u32;
const CXCursor_ConversionFunction: u32 = 26_u32;
const CXCursor_TemplateTypeParameter: u32 = 27_u32;
const CXCursor_NonTypeTemplateParameter: u32 = 28_u32;
const CXCursor_TemplateTemplateParameter: u32 = 29_u32;
const CXCursor_FunctionTemplate: u32 = 30_u32;
const CXCursor_ClassTemplate: u32 = 31_u32;
const CXCursor_ClassTemplatePartialSpecialization: u32 = 32_u32;
const CXCursor_NamespaceAlias: u32 = 33_u32;
const CXCursor_UsingDirective: u32 = 34_u32;
const CXCursor_UsingDeclaration: u32 = 35_u32;
const CXCursor_TypeAliasDecl: u32 = 36_u32;
const CXCursor_ObjCSynthesizeDecl: u32 = 37_u32;
const CXCursor_ObjCDynamicDecl: u32 = 38_u32;
const CXCursor_CXXAccessSpecifier: u32 = 39_u32;
const CXCursor_FirstDecl: u32 = 1_u32;
const CXCursor_LastDecl: u32 = 39_u32;
const CXCursor_FirstRef: u32 = 40_u32;
const CXCursor_ObjCSuperClassRef: u32 = 40_u32;
const CXCursor_ObjCProtocolRef: u32 = 41_u32;
const CXCursor_ObjCClassRef: u32 = 42_u32;
const CXCursor_TypeRef: u32 = 43_u32;
const CXCursor_CXXBaseSpecifier: u32 = 44_u32;
const CXCursor_TemplateRef: u32 = 45_u32;
const CXCursor_NamespaceRef: u32 = 46_u32;
const CXCursor_MemberRef: u32 = 47_u32;
const CXCursor_LabelRef: u32 = 48_u32;
const CXCursor_OverloadedDeclRef: u32 = 49_u32;
const CXCursor_VariableRef: u32 = 50_u32;
const CXCursor_LastRef: u32 = 50_u32;
const CXCursor_FirstInvalid: u32 = 70_u32;
const CXCursor_InvalidFile: u32 = 70_u32;
const CXCursor_NoDeclFound: u32 = 71_u32;
const CXCursor_NotImplemented: u32 = 72_u32;
const CXCursor_InvalidCode: u32 = 73_u32;
const CXCursor_LastInvalid: u32 = 73_u32;
const CXCursor_FirstExpr: u32 = 100_u32;
const CXCursor_UnexposedExpr: u32 = 100_u32;
const CXCursor_DeclRefExpr: u32 = 101_u32;
const CXCursor_MemberRefExpr: u32 = 102_u32;
const CXCursor_CallExpr: u32 = 103_u32;
const CXCursor_ObjCMessageExpr: u32 = 104_u32;
const CXCursor_BlockExpr: u32 = 105_u32;
const CXCursor_IntegerLiteral: u32 = 106_u32;
const CXCursor_FloatingLiteral: u32 = 107_u32;
const CXCursor_ImaginaryLiteral: u32 = 108_u32;
const CXCursor_StringLiteral: u32 = 109_u32;
const CXCursor_CharacterLiteral: u32 = 110_u32;
const CXCursor_ParenExpr: u32 = 111_u32;
const CXCursor_UnaryOperator: u32 = 112_u32;
const CXCursor_ArraySubscriptExpr: u32 = 113_u32;
const CXCursor_BinaryOperator: u32 = 114_u32;
const CXCursor_CompoundAssignOperator: u32 = 115_u32;
const CXCursor_ConditionalOperator: u32 = 116_u32;
const CXCursor_CStyleCastExpr: u32 = 117_u32;
const CXCursor_CompoundLiteralExpr: u32 = 118_u32;
const CXCursor_InitListExpr: u32 = 119_u32;
const CXCursor_AddrLabelExpr: u32 = 120_u32;
const CXCursor_StmtExpr: u32 = 121_u32;
const CXCursor_GenericSelectionExpr: u32 = 122_u32;
const CXCursor_GNUNullExpr: u32 = 123_u32;
const CXCursor_CXXStaticCastExpr: u32 = 124_u32;
const CXCursor_CXXDynamicCastExpr: u32 = 125_u32;
const CXCursor_CXXReinterpretCastExpr: u32 = 126_u32;
const CXCursor_CXXConstCastExpr: u32 = 127_u32;
const CXCursor_CXXFunctionalCastExpr: u32 = 128_u32;
const CXCursor_CXXTypeidExpr: u32 = 129_u32;
const CXCursor_CXXBoolLiteralExpr: u32 = 130_u32;
const CXCursor_CXXNullPtrLiteralExpr: u32 = 131_u32;
const CXCursor_CXXThisExpr: u32 = 132_u32;
const CXCursor_CXXThrowExpr: u32 = 133_u32;
const CXCursor_CXXNewExpr: u32 = 134_u32;
const CXCursor_CXXDeleteExpr: u32 = 135_u32;
const CXCursor_UnaryExpr: u32 = 136_u32;
const CXCursor_ObjCStringLiteral: u32 = 137_u32;
const CXCursor_ObjCEncodeExpr: u32 = 138_u32;
const CXCursor_ObjCSelectorExpr: u32 = 139_u32;
const CXCursor_ObjCProtocolExpr: u32 = 140_u32;
const CXCursor_ObjCBridgedCastExpr: u32 = 141_u32;
const CXCursor_PackExpansionExpr: u32 = 142_u32;
const CXCursor_SizeOfPackExpr: u32 = 143_u32;
const CXCursor_LambdaExpr: u32 = 144_u32;
const CXCursor_ObjCBoolLiteralExpr: u32 = 145_u32;
const CXCursor_LastExpr: u32 = 145_u32;
const CXCursor_FirstStmt: u32 = 200_u32;
const CXCursor_UnexposedStmt: u32 = 200_u32;
const CXCursor_LabelStmt: u32 = 201_u32;
const CXCursor_CompoundStmt: u32 = 202_u32;
const CXCursor_CaseStmt: u32 = 203_u32;
const CXCursor_DefaultStmt: u32 = 204_u32;
const CXCursor_IfStmt: u32 = 205_u32;
const CXCursor_SwitchStmt: u32 = 206_u32;
const CXCursor_WhileStmt: u32 = 207_u32;
const CXCursor_DoStmt: u32 = 208_u32;
const CXCursor_ForStmt: u32 = 209_u32;
const CXCursor_GotoStmt: u32 = 210_u32;
const CXCursor_IndirectGotoStmt: u32 = 211_u32;
const CXCursor_ContinueStmt: u32 = 212_u32;
const CXCursor_BreakStmt: u32 = 213_u32;
const CXCursor_ReturnStmt: u32 = 214_u32;
const CXCursor_AsmStmt: u32 = 215_u32;
const CXCursor_ObjCAtTryStmt: u32 = 216_u32;
const CXCursor_ObjCAtCatchStmt: u32 = 217_u32;
const CXCursor_ObjCAtFinallyStmt: u32 = 218_u32;
const CXCursor_ObjCAtThrowStmt: u32 = 219_u32;
const CXCursor_ObjCAtSynchronizedStmt: u32 = 220_u32;
const CXCursor_ObjCAutoreleasePoolStmt: u32 = 221_u32;
const CXCursor_ObjCForCollectionStmt: u32 = 222_u32;
const CXCursor_CXXCatchStmt: u32 = 223_u32;
const CXCursor_CXXTryStmt: u32 = 224_u32;
const CXCursor_CXXForRangeStmt: u32 = 225_u32;
const CXCursor_SEHTryStmt: u32 = 226_u32;
const CXCursor_SEHExceptStmt: u32 = 227_u32;
const CXCursor_SEHFinallyStmt: u32 = 228_u32;
const CXCursor_NullStmt: u32 = 230_u32;
const CXCursor_DeclStmt: u32 = 231_u32;
const CXCursor_LastStmt: u32 = 231_u32;
const CXCursor_TranslationUnit: u32 = 300_u32;
const CXCursor_FirstAttr: u32 = 400_u32;
const CXCursor_UnexposedAttr: u32 = 400_u32;
const CXCursor_IBActionAttr: u32 = 401_u32;
const CXCursor_IBOutletAttr: u32 = 402_u32;
const CXCursor_IBOutletCollectionAttr: u32 = 403_u32;
const CXCursor_CXXFinalAttr: u32 = 404_u32;
const CXCursor_CXXOverrideAttr: u32 = 405_u32;
const CXCursor_AnnotateAttr: u32 = 406_u32;
const CXCursor_AsmLabelAttr: u32 = 407_u32;
const CXCursor_LastAttr: u32 = 407_u32;
const CXCursor_PreprocessingDirective: u32 = 500_u32;
const CXCursor_MacroDefinition: u32 = 501_u32;
const CXCursor_MacroExpansion: u32 = 502_u32;
const CXCursor_MacroInstantiation: u32 = 502_u32;
const CXCursor_InclusionDirective: u32 = 503_u32;
const CXCursor_FirstPreprocessing: u32 = 500_u32;
const CXCursor_LastPreprocessing: u32 = 503_u32;

type CXCursor = {
    kind: enum_CXCursorKind,
    xdata: c_int,
    data: (*c_void,*c_void,*c_void),
};

type enum_CXLinkageKind = c_uint;
const CXLinkage_Invalid: u32 = 0_u32;
const CXLinkage_NoLinkage: u32 = 1_u32;
const CXLinkage_Internal: u32 = 2_u32;
const CXLinkage_UniqueExternal: u32 = 3_u32;
const CXLinkage_External: u32 = 4_u32;

type enum_CXLanguageKind = c_uint;
const CXLanguage_Invalid: u32 = 0_u32;
const CXLanguage_C: u32 = 1_u32;
const CXLanguage_ObjC: u32 = 2_u32;
const CXLanguage_CPlusPlus: u32 = 3_u32;

type struct_CXCursorSetImpl = c_void;

type CXCursorSet = *struct_CXCursorSetImpl;

type enum_CXTypeKind = c_uint;
const CXType_Invalid: u32 = 0_u32;
const CXType_Unexposed: u32 = 1_u32;
const CXType_Void: u32 = 2_u32;
const CXType_Bool: u32 = 3_u32;
const CXType_Char_U: u32 = 4_u32;
const CXType_UChar: u32 = 5_u32;
const CXType_Char16: u32 = 6_u32;
const CXType_Char32: u32 = 7_u32;
const CXType_UShort: u32 = 8_u32;
const CXType_UInt: u32 = 9_u32;
const CXType_ULong: u32 = 10_u32;
const CXType_ULongLong: u32 = 11_u32;
const CXType_UInt128: u32 = 12_u32;
const CXType_Char_S: u32 = 13_u32;
const CXType_SChar: u32 = 14_u32;
const CXType_WChar: u32 = 15_u32;
const CXType_Short: u32 = 16_u32;
const CXType_Int: u32 = 17_u32;
const CXType_Long: u32 = 18_u32;
const CXType_LongLong: u32 = 19_u32;
const CXType_Int128: u32 = 20_u32;
const CXType_Float: u32 = 21_u32;
const CXType_Double: u32 = 22_u32;
const CXType_LongDouble: u32 = 23_u32;
const CXType_NullPtr: u32 = 24_u32;
const CXType_Overload: u32 = 25_u32;
const CXType_Dependent: u32 = 26_u32;
const CXType_ObjCId: u32 = 27_u32;
const CXType_ObjCClass: u32 = 28_u32;
const CXType_ObjCSel: u32 = 29_u32;
const CXType_FirstBuiltin: u32 = 2_u32;
const CXType_LastBuiltin: u32 = 29_u32;
const CXType_Complex: u32 = 100_u32;
const CXType_Pointer: u32 = 101_u32;
const CXType_BlockPointer: u32 = 102_u32;
const CXType_LValueReference: u32 = 103_u32;
const CXType_RValueReference: u32 = 104_u32;
const CXType_Record: u32 = 105_u32;
const CXType_Enum: u32 = 106_u32;
const CXType_Typedef: u32 = 107_u32;
const CXType_ObjCInterface: u32 = 108_u32;
const CXType_ObjCObjectPointer: u32 = 109_u32;
const CXType_FunctionNoProto: u32 = 110_u32;
const CXType_FunctionProto: u32 = 111_u32;
const CXType_ConstantArray: u32 = 112_u32;
const CXType_Vector: u32 = 113_u32;

type enum_CXCallingConv = c_uint;
const CXCallingConv_Default: u32 = 0_u32;
const CXCallingConv_C: u32 = 1_u32;
const CXCallingConv_X86StdCall: u32 = 2_u32;
const CXCallingConv_X86FastCall: u32 = 3_u32;
const CXCallingConv_X86ThisCall: u32 = 4_u32;
const CXCallingConv_X86Pascal: u32 = 5_u32;
const CXCallingConv_AAPCS: u32 = 6_u32;
const CXCallingConv_AAPCS_VFP: u32 = 7_u32;
const CXCallingConv_Invalid: u32 = 100_u32;
const CXCallingConv_Unexposed: u32 = 200_u32;

type CXType = {
    kind: enum_CXTypeKind,
    data: (*c_void,*c_void),
};

type enum_CX_CXXAccessSpecifier = c_uint;
const CX_CXXInvalidAccessSpecifier: u32 = 0_u32;
const CX_CXXPublic: u32 = 1_u32;
const CX_CXXProtected: u32 = 2_u32;
const CX_CXXPrivate: u32 = 3_u32;

type enum_CXChildVisitResult = c_uint;
const CXChildVisit_Break: u32 = 0_u32;
const CXChildVisit_Continue: u32 = 1_u32;
const CXChildVisit_Recurse: u32 = 2_u32;

type CXCursorVisitor = *u8;

type enum_CXNameRefFlags = c_uint;
const CXNameRange_WantQualifier: u32 = 1_u32;
const CXNameRange_WantTemplateArgs: u32 = 2_u32;
const CXNameRange_WantSinglePiece: u32 = 4_u32;

type enum_CXTokenKind = c_uint;
const CXToken_Punctuation: u32 = 0_u32;
const CXToken_Keyword: u32 = 1_u32;
const CXToken_Identifier: u32 = 2_u32;
const CXToken_Literal: u32 = 3_u32;
const CXToken_Comment: u32 = 4_u32;

type CXTokenKind = enum_CXTokenKind;

type CXToken = {
    int_data: (c_uint,c_uint,c_uint,c_uint),
    ptr_data: *c_void,
};

type CXCompletionString = *c_void;

type CXCompletionResult = {
    CursorKind: enum_CXCursorKind,
    CompletionString: CXCompletionString,
};

type enum_CXCompletionChunkKind = c_uint;
const CXCompletionChunk_Optional: u32 = 0_u32;
const CXCompletionChunk_TypedText: u32 = 1_u32;
const CXCompletionChunk_Text: u32 = 2_u32;
const CXCompletionChunk_Placeholder: u32 = 3_u32;
const CXCompletionChunk_Informative: u32 = 4_u32;
const CXCompletionChunk_CurrentParameter: u32 = 5_u32;
const CXCompletionChunk_LeftParen: u32 = 6_u32;
const CXCompletionChunk_RightParen: u32 = 7_u32;
const CXCompletionChunk_LeftBracket: u32 = 8_u32;
const CXCompletionChunk_RightBracket: u32 = 9_u32;
const CXCompletionChunk_LeftBrace: u32 = 10_u32;
const CXCompletionChunk_RightBrace: u32 = 11_u32;
const CXCompletionChunk_LeftAngle: u32 = 12_u32;
const CXCompletionChunk_RightAngle: u32 = 13_u32;
const CXCompletionChunk_Comma: u32 = 14_u32;
const CXCompletionChunk_ResultType: u32 = 15_u32;
const CXCompletionChunk_Colon: u32 = 16_u32;
const CXCompletionChunk_SemiColon: u32 = 17_u32;
const CXCompletionChunk_Equal: u32 = 18_u32;
const CXCompletionChunk_HorizontalSpace: u32 = 19_u32;
const CXCompletionChunk_VerticalSpace: u32 = 20_u32;

type CXCodeCompleteResults = {
    Results: *CXCompletionResult,
    NumResults: c_uint,
};

type enum_CXCodeComplete_Flags = c_uint;
const CXCodeComplete_IncludeMacros: u32 = 1_u32;
const CXCodeComplete_IncludeCodePatterns: u32 = 2_u32;

type enum_CXCompletionContext = c_uint;
const CXCompletionContext_Unexposed: u32 = 0_u32;
const CXCompletionContext_AnyType: u32 = 1_u32;
const CXCompletionContext_AnyValue: u32 = 2_u32;
const CXCompletionContext_ObjCObjectValue: u32 = 4_u32;
const CXCompletionContext_ObjCSelectorValue: u32 = 8_u32;
const CXCompletionContext_CXXClassTypeValue: u32 = 16_u32;
const CXCompletionContext_DotMemberAccess: u32 = 32_u32;
const CXCompletionContext_ArrowMemberAccess: u32 = 64_u32;
const CXCompletionContext_ObjCPropertyAccess: u32 = 128_u32;
const CXCompletionContext_EnumTag: u32 = 256_u32;
const CXCompletionContext_UnionTag: u32 = 512_u32;
const CXCompletionContext_StructTag: u32 = 1024_u32;
const CXCompletionContext_ClassTag: u32 = 2048_u32;
const CXCompletionContext_Namespace: u32 = 4096_u32;
const CXCompletionContext_NestedNameSpecifier: u32 = 8192_u32;
const CXCompletionContext_ObjCInterface: u32 = 16384_u32;
const CXCompletionContext_ObjCProtocol: u32 = 32768_u32;
const CXCompletionContext_ObjCCategory: u32 = 65536_u32;
const CXCompletionContext_ObjCInstanceMessage: u32 = 131072_u32;
const CXCompletionContext_ObjCClassMessage: u32 = 262144_u32;
const CXCompletionContext_ObjCSelectorName: u32 = 524288_u32;
const CXCompletionContext_MacroName: u32 = 1048576_u32;
const CXCompletionContext_NaturalLanguage: u32 = 2097152_u32;
const CXCompletionContext_Unknown: u32 = 4194303_u32;

type CXInclusionVisitor = *u8;

type CXRemapping = *c_void;

type enum_CXVisitorResult = c_uint;
const CXVisit_Break: u32 = 0_u32;
const CXVisit_Continue: u32 = 1_u32;

type CXCursorAndRangeVisitor = {
    context: *c_void,
    visit: *u8,
};

type CXIdxClientFile = *c_void;

type CXIdxClientEntity = *c_void;

type CXIdxClientContainer = *c_void;

type CXIdxClientASTFile = *c_void;

type CXIdxLoc = {
    ptr_data: (*c_void,*c_void),
    int_data: c_uint,
};

type CXIdxIncludedFileInfo = {
    hashLoc: CXIdxLoc,
    filename: *c_char,
    file: CXFile,
    isImport: c_int,
    isAngled: c_int,
};

type CXIdxImportedASTFileInfo = {
    file: CXFile,
    loc: CXIdxLoc,
    isModule: c_int,
};


type CXIdxEntityKind = c_uint;
const CXIdxEntity_Unexposed: u32 = 0_u32;
const CXIdxEntity_Typedef: u32 = 1_u32;
const CXIdxEntity_Function: u32 = 2_u32;
const CXIdxEntity_Variable: u32 = 3_u32;
const CXIdxEntity_Field: u32 = 4_u32;
const CXIdxEntity_EnumConstant: u32 = 5_u32;
const CXIdxEntity_ObjCClass: u32 = 6_u32;
const CXIdxEntity_ObjCProtocol: u32 = 7_u32;
const CXIdxEntity_ObjCCategory: u32 = 8_u32;
const CXIdxEntity_ObjCInstanceMethod: u32 = 9_u32;
const CXIdxEntity_ObjCClassMethod: u32 = 10_u32;
const CXIdxEntity_ObjCProperty: u32 = 11_u32;
const CXIdxEntity_ObjCIvar: u32 = 12_u32;
const CXIdxEntity_Enum: u32 = 13_u32;
const CXIdxEntity_Struct: u32 = 14_u32;
const CXIdxEntity_Union: u32 = 15_u32;
const CXIdxEntity_CXXClass: u32 = 16_u32;
const CXIdxEntity_CXXNamespace: u32 = 17_u32;
const CXIdxEntity_CXXNamespaceAlias: u32 = 18_u32;
const CXIdxEntity_CXXStaticVariable: u32 = 19_u32;
const CXIdxEntity_CXXStaticMethod: u32 = 20_u32;
const CXIdxEntity_CXXInstanceMethod: u32 = 21_u32;
const CXIdxEntity_CXXConstructor: u32 = 22_u32;
const CXIdxEntity_CXXDestructor: u32 = 23_u32;
const CXIdxEntity_CXXConversionFunction: u32 = 24_u32;
const CXIdxEntity_CXXTypeAlias: u32 = 25_u32;


type CXIdxEntityLanguage = c_uint;
const CXIdxEntityLang_None: u32 = 0_u32;
const CXIdxEntityLang_C: u32 = 1_u32;
const CXIdxEntityLang_ObjC: u32 = 2_u32;
const CXIdxEntityLang_CXX: u32 = 3_u32;


type CXIdxEntityCXXTemplateKind = c_uint;
const CXIdxEntity_NonTemplate: u32 = 0_u32;
const CXIdxEntity_Template: u32 = 1_u32;
const CXIdxEntity_TemplatePartialSpecialization: u32 = 2_u32;
const CXIdxEntity_TemplateSpecialization: u32 = 3_u32;


type CXIdxAttrKind = c_uint;
const CXIdxAttr_Unexposed: u32 = 0_u32;
const CXIdxAttr_IBAction: u32 = 1_u32;
const CXIdxAttr_IBOutlet: u32 = 2_u32;
const CXIdxAttr_IBOutletCollection: u32 = 3_u32;

type CXIdxAttrInfo = {
    kind: CXIdxAttrKind,
    cursor: CXCursor,
    loc: CXIdxLoc,
};

type CXIdxEntityInfo = {
    kind: CXIdxEntityKind,
    templateKind: CXIdxEntityCXXTemplateKind,
    lang: CXIdxEntityLanguage,
    name: *c_char,
    USR: *c_char,
    cursor: CXCursor,
    attributes: **CXIdxAttrInfo,
    numAttributes: c_uint,
};

type CXIdxContainerInfo = {
    cursor: CXCursor,
};

type CXIdxIBOutletCollectionAttrInfo = {
    attrInfo: *CXIdxAttrInfo,
    objcClass: *CXIdxEntityInfo,
    classCursor: CXCursor,
    classLoc: CXIdxLoc,
};

type CXIdxDeclInfo = {
    entityInfo: *CXIdxEntityInfo,
    cursor: CXCursor,
    loc: CXIdxLoc,
    semanticContainer: *CXIdxContainerInfo,
    lexicalContainer: *CXIdxContainerInfo,
    isRedeclaration: c_int,
    isDefinition: c_int,
    isContainer: c_int,
    declAsContainer: *CXIdxContainerInfo,
    isImplicit: c_int,
    attributes: **CXIdxAttrInfo,
    numAttributes: c_uint,
};


type CXIdxObjCContainerKind = c_uint;
const CXIdxObjCContainer_ForwardRef: u32 = 0_u32;
const CXIdxObjCContainer_Interface: u32 = 1_u32;
const CXIdxObjCContainer_Implementation: u32 = 2_u32;

type CXIdxObjCContainerDeclInfo = {
    declInfo: *CXIdxDeclInfo,
    kind: CXIdxObjCContainerKind,
};

type CXIdxBaseClassInfo = {
    base: *CXIdxEntityInfo,
    cursor: CXCursor,
    loc: CXIdxLoc,
};

type CXIdxObjCProtocolRefInfo = {
    protocol: *CXIdxEntityInfo,
    cursor: CXCursor,
    loc: CXIdxLoc,
};

type CXIdxObjCProtocolRefListInfo = {
    protocols: **CXIdxObjCProtocolRefInfo,
    numProtocols: c_uint,
};

type CXIdxObjCInterfaceDeclInfo = {
    containerInfo: *CXIdxObjCContainerDeclInfo,
    superInfo: *CXIdxBaseClassInfo,
    protocols: *CXIdxObjCProtocolRefListInfo,
};

type CXIdxObjCCategoryDeclInfo = {
    containerInfo: *CXIdxObjCContainerDeclInfo,
    objcClass: *CXIdxEntityInfo,
    classCursor: CXCursor,
    classLoc: CXIdxLoc,
    protocols: *CXIdxObjCProtocolRefListInfo,
};

type CXIdxObjCPropertyDeclInfo = {
    declInfo: *CXIdxDeclInfo,
    getter: *CXIdxEntityInfo,
    setter: *CXIdxEntityInfo,
};

type CXIdxCXXClassDeclInfo = {
    declInfo: *CXIdxDeclInfo,
    bases: **CXIdxBaseClassInfo,
    numBases: c_uint,
};


type CXIdxEntityRefKind = c_uint;
const CXIdxEntityRef_Direct: u32 = 1_u32;
const CXIdxEntityRef_Implicit: u32 = 2_u32;

type CXIdxEntityRefInfo = {
    kind: CXIdxEntityRefKind,
    cursor: CXCursor,
    loc: CXIdxLoc,
    referencedEntity: *CXIdxEntityInfo,
    parentEntity: *CXIdxEntityInfo,
    container: *CXIdxContainerInfo,
};

type IndexerCallbacks = {
    abortQuery: *u8,
    diagnostic: *u8,
    enteredMainFile: *u8,
    ppIncludedFile: *u8,
    importedASTFile: *u8,
    startedTranslationUnit: *u8,
    indexDeclaration: *u8,
    indexEntityReference: *u8,
};

type CXIndexAction = *c_void;


type CXIndexOptFlags = c_uint;
const CXIndexOpt_None: u32 = 0_u32;
const CXIndexOpt_SuppressRedundantRefs: u32 = 1_u32;
const CXIndexOpt_IndexFunctionLocalSymbols: u32 = 2_u32;
const CXIndexOpt_IndexImplicitTemplateInstantiations: u32 = 4_u32;
const CXIndexOpt_SuppressWarnings: u32 = 8_u32;

#[link_name="clang"]
native mod bindgen {

fn clang_getCString(++string: CXString) -> *c_char;

fn clang_disposeString(++string: CXString);

fn clang_createIndex(++excludeDeclarationsFromPCH: c_int, ++displayDiagnostics: c_int) -> CXIndex;

fn clang_disposeIndex(++index: CXIndex);

fn clang_CXIndex_setGlobalOptions(++arg1: CXIndex, ++options: c_uint);

fn clang_CXIndex_getGlobalOptions(++arg1: CXIndex) -> c_uint;

fn clang_getFileName(++SFile: CXFile) -> CXString;

fn clang_getFileTime(++SFile: CXFile) -> time_t;

fn clang_isFileMultipleIncludeGuarded(++tu: CXTranslationUnit, ++file: CXFile) -> c_uint;

fn clang_getFile(++tu: CXTranslationUnit, ++file_name: *c_char) -> CXFile;

fn clang_getNullLocation() -> CXSourceLocation;

fn clang_equalLocations(++loc1: CXSourceLocation, ++loc2: CXSourceLocation) -> c_uint;

fn clang_getLocation(++tu: CXTranslationUnit, ++file: CXFile, ++line: c_uint, ++column: c_uint) -> CXSourceLocation;

fn clang_getLocationForOffset(++tu: CXTranslationUnit, ++file: CXFile, ++offset: c_uint) -> CXSourceLocation;

fn clang_getNullRange() -> CXSourceRange;

fn clang_getRange(++begin: CXSourceLocation, ++end: CXSourceLocation) -> CXSourceRange;

fn clang_equalRanges(++range1: CXSourceRange, ++range2: CXSourceRange) -> c_uint;

fn clang_Range_isNull(++range: CXSourceRange) -> c_int;

fn clang_getExpansionLocation(++location: CXSourceLocation, ++file: *CXFile, ++line: *c_uint, ++column: *c_uint, ++offset: *c_uint);

fn clang_getPresumedLocation(++location: CXSourceLocation, ++filename: *CXString, ++line: *c_uint, ++column: *c_uint);

fn clang_getInstantiationLocation(++location: CXSourceLocation, ++file: *CXFile, ++line: *c_uint, ++column: *c_uint, ++offset: *c_uint);

fn clang_getSpellingLocation(++location: CXSourceLocation, ++file: *CXFile, ++line: *c_uint, ++column: *c_uint, ++offset: *c_uint);

fn clang_getRangeStart(++range: CXSourceRange) -> CXSourceLocation;

fn clang_getRangeEnd(++range: CXSourceRange) -> CXSourceLocation;

fn clang_getNumDiagnosticsInSet(++Diags: CXDiagnosticSet) -> c_uint;

fn clang_getDiagnosticInSet(++Diags: CXDiagnosticSet, ++Index: c_uint) -> CXDiagnostic;

fn clang_loadDiagnostics(++file: *c_char, ++error: *enum_CXLoadDiag_Error, ++errorString: *CXString) -> CXDiagnosticSet;

fn clang_disposeDiagnosticSet(++Diags: CXDiagnosticSet);

fn clang_getChildDiagnostics(++D: CXDiagnostic) -> CXDiagnosticSet;

fn clang_getNumDiagnostics(++Unit: CXTranslationUnit) -> c_uint;

fn clang_getDiagnostic(++Unit: CXTranslationUnit, ++Index: c_uint) -> CXDiagnostic;

fn clang_getDiagnosticSetFromTU(++Unit: CXTranslationUnit) -> CXDiagnosticSet;

fn clang_disposeDiagnostic(++Diagnostic: CXDiagnostic);

fn clang_formatDiagnostic(++Diagnostic: CXDiagnostic, ++Options: c_uint) -> CXString;

fn clang_defaultDiagnosticDisplayOptions() -> c_uint;

fn clang_getDiagnosticSeverity(++arg1: CXDiagnostic) -> enum_CXDiagnosticSeverity;

fn clang_getDiagnosticLocation(++arg1: CXDiagnostic) -> CXSourceLocation;

fn clang_getDiagnosticSpelling(++arg1: CXDiagnostic) -> CXString;

fn clang_getDiagnosticOption(++Diag: CXDiagnostic, ++Disable: *CXString) -> CXString;

fn clang_getDiagnosticCategory(++arg1: CXDiagnostic) -> c_uint;

fn clang_getDiagnosticCategoryName(++Category: c_uint) -> CXString;

fn clang_getDiagnosticCategoryText(++arg1: CXDiagnostic) -> CXString;

fn clang_getDiagnosticNumRanges(++arg1: CXDiagnostic) -> c_uint;

fn clang_getDiagnosticRange(++Diagnostic: CXDiagnostic, ++Range: c_uint) -> CXSourceRange;

fn clang_getDiagnosticNumFixIts(++Diagnostic: CXDiagnostic) -> c_uint;

fn clang_getDiagnosticFixIt(++Diagnostic: CXDiagnostic, ++FixIt: c_uint, ++ReplacementRange: *CXSourceRange) -> CXString;

fn clang_getTranslationUnitSpelling(++CTUnit: CXTranslationUnit) -> CXString;

fn clang_createTranslationUnitFromSourceFile(++CIdx: CXIndex, ++source_filename: *c_char, ++num_clang_command_line_args: c_int, ++clang_command_line_args: **c_char, ++num_unsaved_files: c_uint, ++unsaved_files: *struct_CXUnsavedFile) -> CXTranslationUnit;

fn clang_createTranslationUnit(++arg1: CXIndex, ++ast_filename: *c_char) -> CXTranslationUnit;

fn clang_defaultEditingTranslationUnitOptions() -> c_uint;

fn clang_parseTranslationUnit(++CIdx: CXIndex, ++source_filename: *c_char, ++command_line_args: **c_char, ++num_command_line_args: c_int, ++unsaved_files: *struct_CXUnsavedFile, ++num_unsaved_files: c_uint, ++options: c_uint) -> CXTranslationUnit;

fn clang_defaultSaveOptions(++TU: CXTranslationUnit) -> c_uint;

fn clang_saveTranslationUnit(++TU: CXTranslationUnit, ++FileName: *c_char, ++options: c_uint) -> c_int;

fn clang_disposeTranslationUnit(++arg1: CXTranslationUnit);

fn clang_defaultReparseOptions(++TU: CXTranslationUnit) -> c_uint;

fn clang_reparseTranslationUnit(++TU: CXTranslationUnit, ++num_unsaved_files: c_uint, ++unsaved_files: *struct_CXUnsavedFile, ++options: c_uint) -> c_int;

fn clang_getTUResourceUsageName(++kind: enum_CXTUResourceUsageKind) -> *c_char;

fn clang_getCXTUResourceUsage(++TU: CXTranslationUnit) -> CXTUResourceUsage;

fn clang_disposeCXTUResourceUsage(++usage: CXTUResourceUsage);

fn clang_getNullCursor() -> CXCursor;

fn clang_getTranslationUnitCursor(++arg1: CXTranslationUnit) -> CXCursor;

fn clang_equalCursors(++arg1: CXCursor, ++arg2: CXCursor) -> c_uint;

fn clang_Cursor_isNull(++arg1: CXCursor) -> c_int;

fn clang_hashCursor(++arg1: CXCursor) -> c_uint;

fn clang_getCursorKind(++arg1: CXCursor) -> enum_CXCursorKind;

fn clang_isDeclaration(++arg1: enum_CXCursorKind) -> c_uint;

fn clang_isReference(++arg1: enum_CXCursorKind) -> c_uint;

fn clang_isExpression(++arg1: enum_CXCursorKind) -> c_uint;

fn clang_isStatement(++arg1: enum_CXCursorKind) -> c_uint;

fn clang_isAttribute(++arg1: enum_CXCursorKind) -> c_uint;

fn clang_isInvalid(++arg1: enum_CXCursorKind) -> c_uint;

fn clang_isTranslationUnit(++arg1: enum_CXCursorKind) -> c_uint;

fn clang_isPreprocessing(++arg1: enum_CXCursorKind) -> c_uint;

fn clang_isUnexposed(++arg1: enum_CXCursorKind) -> c_uint;

fn clang_getCursorLinkage(++cursor: CXCursor) -> enum_CXLinkageKind;

fn clang_getCursorAvailability(++cursor: CXCursor) -> enum_CXAvailabilityKind;

fn clang_getCursorLanguage(++cursor: CXCursor) -> enum_CXLanguageKind;

fn clang_Cursor_getTranslationUnit(++arg1: CXCursor) -> CXTranslationUnit;

fn clang_createCXCursorSet() -> CXCursorSet;

fn clang_disposeCXCursorSet(++cset: CXCursorSet);

fn clang_CXCursorSet_contains(++cset: CXCursorSet, ++cursor: CXCursor) -> c_uint;

fn clang_CXCursorSet_insert(++cset: CXCursorSet, ++cursor: CXCursor) -> c_uint;

fn clang_getCursorSemanticParent(++cursor: CXCursor) -> CXCursor;

fn clang_getCursorLexicalParent(++cursor: CXCursor) -> CXCursor;

fn clang_getOverriddenCursors(++cursor: CXCursor, ++overridden: **CXCursor, ++num_overridden: *c_uint);

fn clang_disposeOverriddenCursors(++overridden: *CXCursor);

fn clang_getIncludedFile(++cursor: CXCursor) -> CXFile;

fn clang_getCursor(++arg1: CXTranslationUnit, ++arg2: CXSourceLocation) -> CXCursor;

fn clang_getCursorLocation(++arg1: CXCursor) -> CXSourceLocation;

fn clang_getCursorExtent(++arg1: CXCursor) -> CXSourceRange;

fn clang_getCursorType(++C: CXCursor) -> CXType;

fn clang_getTypedefDeclUnderlyingType(++C: CXCursor) -> CXType;

fn clang_getEnumDeclIntegerType(++C: CXCursor) -> CXType;

fn clang_getEnumConstantDeclValue(++C: CXCursor) -> c_longlong;

fn clang_getEnumConstantDeclUnsignedValue(++C: CXCursor) -> c_ulonglong;

fn clang_Cursor_getNumArguments(++C: CXCursor) -> c_int;

fn clang_Cursor_getArgument(++C: CXCursor, ++i: c_uint) -> CXCursor;

fn clang_equalTypes(++A: CXType, ++B: CXType) -> c_uint;

fn clang_getCanonicalType(++T: CXType) -> CXType;

fn clang_isConstQualifiedType(++T: CXType) -> c_uint;

fn clang_isVolatileQualifiedType(++T: CXType) -> c_uint;

fn clang_isRestrictQualifiedType(++T: CXType) -> c_uint;

fn clang_getPointeeType(++T: CXType) -> CXType;

fn clang_getTypeDeclaration(++T: CXType) -> CXCursor;

fn clang_getDeclObjCTypeEncoding(++C: CXCursor) -> CXString;

fn clang_getTypeKindSpelling(++K: enum_CXTypeKind) -> CXString;

fn clang_getFunctionTypeCallingConv(++T: CXType) -> enum_CXCallingConv;

fn clang_getResultType(++T: CXType) -> CXType;

fn clang_getNumArgTypes(++T: CXType) -> c_int;

fn clang_getArgType(++T: CXType, ++i: c_uint) -> CXType;

fn clang_isFunctionTypeVariadic(++T: CXType) -> c_uint;

fn clang_getCursorResultType(++C: CXCursor) -> CXType;

fn clang_isPODType(++T: CXType) -> c_uint;

fn clang_getElementType(++T: CXType) -> CXType;

fn clang_getNumElements(++T: CXType) -> c_longlong;

fn clang_getArrayElementType(++T: CXType) -> CXType;

fn clang_getArraySize(++T: CXType) -> c_longlong;

fn clang_isVirtualBase(++arg1: CXCursor) -> c_uint;

fn clang_getCXXAccessSpecifier(++arg1: CXCursor) -> enum_CX_CXXAccessSpecifier;

fn clang_getNumOverloadedDecls(++cursor: CXCursor) -> c_uint;

fn clang_getOverloadedDecl(++cursor: CXCursor, ++index: c_uint) -> CXCursor;

fn clang_getIBOutletCollectionType(++arg1: CXCursor) -> CXType;

fn clang_visitChildren(++parent: CXCursor, ++visitor: CXCursorVisitor, ++client_data: CXClientData) -> c_uint;

fn clang_getCursorUSR(++arg1: CXCursor) -> CXString;

fn clang_constructUSR_ObjCClass(++class_name: *c_char) -> CXString;

fn clang_constructUSR_ObjCCategory(++class_name: *c_char, ++category_name: *c_char) -> CXString;

fn clang_constructUSR_ObjCProtocol(++protocol_name: *c_char) -> CXString;

fn clang_constructUSR_ObjCIvar(++name: *c_char, ++classUSR: CXString) -> CXString;

fn clang_constructUSR_ObjCMethod(++name: *c_char, ++isInstanceMethod: c_uint, ++classUSR: CXString) -> CXString;

fn clang_constructUSR_ObjCProperty(++property: *c_char, ++classUSR: CXString) -> CXString;

fn clang_getCursorSpelling(++arg1: CXCursor) -> CXString;

fn clang_Cursor_getSpellingNameRange(++arg1: CXCursor, ++pieceIndex: c_uint, ++options: c_uint) -> CXSourceRange;

fn clang_getCursorDisplayName(++arg1: CXCursor) -> CXString;

fn clang_getCursorReferenced(++arg1: CXCursor) -> CXCursor;

fn clang_getCursorDefinition(++arg1: CXCursor) -> CXCursor;

fn clang_isCursorDefinition(++arg1: CXCursor) -> c_uint;

fn clang_getCanonicalCursor(++arg1: CXCursor) -> CXCursor;

fn clang_Cursor_getObjCSelectorIndex(++arg1: CXCursor) -> c_int;

fn clang_CXXMethod_isStatic(++C: CXCursor) -> c_uint;

fn clang_CXXMethod_isVirtual(++C: CXCursor) -> c_uint;

fn clang_getTemplateCursorKind(++C: CXCursor) -> enum_CXCursorKind;

fn clang_getSpecializedCursorTemplate(++C: CXCursor) -> CXCursor;

fn clang_getCursorReferenceNameRange(++C: CXCursor, ++NameFlags: c_uint, ++PieceIndex: c_uint) -> CXSourceRange;

fn clang_getTokenKind(++arg1: CXToken) -> CXTokenKind;

fn clang_getTokenSpelling(++arg1: CXTranslationUnit, ++arg2: CXToken) -> CXString;

fn clang_getTokenLocation(++arg1: CXTranslationUnit, ++arg2: CXToken) -> CXSourceLocation;

fn clang_getTokenExtent(++arg1: CXTranslationUnit, ++arg2: CXToken) -> CXSourceRange;

fn clang_tokenize(++TU: CXTranslationUnit, ++Range: CXSourceRange, ++Tokens: **CXToken, ++NumTokens: *c_uint);

fn clang_annotateTokens(++TU: CXTranslationUnit, ++Tokens: *CXToken, ++NumTokens: c_uint, ++Cursors: *CXCursor);

fn clang_disposeTokens(++TU: CXTranslationUnit, ++Tokens: *CXToken, ++NumTokens: c_uint);

fn clang_getCursorKindSpelling(++Kind: enum_CXCursorKind) -> CXString;

fn clang_getDefinitionSpellingAndExtent(++arg1: CXCursor, ++startBuf: **c_char, ++endBuf: **c_char, ++startLine: *c_uint, ++startColumn: *c_uint, ++endLine: *c_uint, ++endColumn: *c_uint);

fn clang_enableStackTraces();

fn clang_executeOnThread(++_fn: *u8, ++user_data: *c_void, ++stack_size: c_uint);

fn clang_getCompletionChunkKind(++completion_string: CXCompletionString, ++chunk_number: c_uint) -> enum_CXCompletionChunkKind;

fn clang_getCompletionChunkText(++completion_string: CXCompletionString, ++chunk_number: c_uint) -> CXString;

fn clang_getCompletionChunkCompletionString(++completion_string: CXCompletionString, ++chunk_number: c_uint) -> CXCompletionString;

fn clang_getNumCompletionChunks(++completion_string: CXCompletionString) -> c_uint;

fn clang_getCompletionPriority(++completion_string: CXCompletionString) -> c_uint;

fn clang_getCompletionAvailability(++completion_string: CXCompletionString) -> enum_CXAvailabilityKind;

fn clang_getCompletionNumAnnotations(++completion_string: CXCompletionString) -> c_uint;

fn clang_getCompletionAnnotation(++completion_string: CXCompletionString, ++annotation_number: c_uint) -> CXString;

fn clang_getCompletionParent(++completion_string: CXCompletionString, ++kind: *enum_CXCursorKind) -> CXString;

fn clang_getCursorCompletionString(++cursor: CXCursor) -> CXCompletionString;

fn clang_defaultCodeCompleteOptions() -> c_uint;

fn clang_codeCompleteAt(++TU: CXTranslationUnit, ++complete_filename: *c_char, ++complete_line: c_uint, ++complete_column: c_uint, ++unsaved_files: *struct_CXUnsavedFile, ++num_unsaved_files: c_uint, ++options: c_uint) -> *CXCodeCompleteResults;

fn clang_sortCodeCompletionResults(++Results: *CXCompletionResult, ++NumResults: c_uint);

fn clang_disposeCodeCompleteResults(++Results: *CXCodeCompleteResults);

fn clang_codeCompleteGetNumDiagnostics(++Results: *CXCodeCompleteResults) -> c_uint;

fn clang_codeCompleteGetDiagnostic(++Results: *CXCodeCompleteResults, ++Index: c_uint) -> CXDiagnostic;

fn clang_codeCompleteGetContexts(++Results: *CXCodeCompleteResults) -> c_ulonglong;

fn clang_codeCompleteGetContainerKind(++Results: *CXCodeCompleteResults, ++IsIncomplete: *c_uint) -> enum_CXCursorKind;

fn clang_codeCompleteGetContainerUSR(++Results: *CXCodeCompleteResults) -> CXString;

fn clang_codeCompleteGetObjCSelector(++Results: *CXCodeCompleteResults) -> CXString;

fn clang_getClangVersion() -> CXString;

fn clang_toggleCrashRecovery(++isEnabled: c_uint);

fn clang_getInclusions(++tu: CXTranslationUnit, ++visitor: CXInclusionVisitor, ++client_data: CXClientData);

fn clang_getRemappings(++path: *c_char) -> CXRemapping;

fn clang_getRemappingsFromFileList(++filePaths: **c_char, ++numFiles: c_uint) -> CXRemapping;

fn clang_remap_getNumFiles(++arg1: CXRemapping) -> c_uint;

fn clang_remap_getFilenames(++arg1: CXRemapping, ++index: c_uint, ++original: *CXString, ++transformed: *CXString);

fn clang_remap_dispose(++arg1: CXRemapping);

fn clang_findReferencesInFile(++cursor: CXCursor, ++file: CXFile, ++visitor: CXCursorAndRangeVisitor);

fn clang_index_isEntityObjCContainerKind(++arg1: CXIdxEntityKind) -> c_int;

fn clang_index_getObjCContainerDeclInfo(++arg1: *CXIdxDeclInfo) -> *CXIdxObjCContainerDeclInfo;

fn clang_index_getObjCInterfaceDeclInfo(++arg1: *CXIdxDeclInfo) -> *CXIdxObjCInterfaceDeclInfo;

fn clang_index_getObjCCategoryDeclInfo(++arg1: *CXIdxDeclInfo) -> *CXIdxObjCCategoryDeclInfo;

fn clang_index_getObjCProtocolRefListInfo(++arg1: *CXIdxDeclInfo) -> *CXIdxObjCProtocolRefListInfo;

fn clang_index_getObjCPropertyDeclInfo(++arg1: *CXIdxDeclInfo) -> *CXIdxObjCPropertyDeclInfo;

fn clang_index_getIBOutletCollectionAttrInfo(++arg1: *CXIdxAttrInfo) -> *CXIdxIBOutletCollectionAttrInfo;

fn clang_index_getCXXClassDeclInfo(++arg1: *CXIdxDeclInfo) -> *CXIdxCXXClassDeclInfo;

fn clang_index_getClientContainer(++arg1: *CXIdxContainerInfo) -> CXIdxClientContainer;

fn clang_index_setClientContainer(++arg1: *CXIdxContainerInfo, ++arg2: CXIdxClientContainer);

fn clang_index_getClientEntity(++arg1: *CXIdxEntityInfo) -> CXIdxClientEntity;

fn clang_index_setClientEntity(++arg1: *CXIdxEntityInfo, ++arg2: CXIdxClientEntity);

fn clang_IndexAction_create(++CIdx: CXIndex) -> CXIndexAction;

fn clang_IndexAction_dispose(++arg1: CXIndexAction);

fn clang_indexSourceFile(++arg1: CXIndexAction, ++client_data: CXClientData, ++index_callbacks: *IndexerCallbacks, ++index_callbacks_size: c_uint, ++index_options: c_uint, ++source_filename: *c_char, ++command_line_args: **c_char, ++num_command_line_args: c_int, ++unsaved_files: *struct_CXUnsavedFile, ++num_unsaved_files: c_uint, ++out_TU: *CXTranslationUnit, ++TU_options: c_uint) -> c_int;

fn clang_indexTranslationUnit(++arg1: CXIndexAction, ++client_data: CXClientData, ++index_callbacks: *IndexerCallbacks, ++index_callbacks_size: c_uint, ++index_options: c_uint, ++arg2: CXTranslationUnit) -> c_int;

fn clang_indexLoc_getFileLocation(++loc: CXIdxLoc, ++indexFile: *CXIdxClientFile, ++file: *CXFile, ++line: *c_uint, ++column: *c_uint, ++offset: *c_uint);

fn clang_indexLoc_getCXSourceLocation(++loc: CXIdxLoc) -> CXSourceLocation;

}
